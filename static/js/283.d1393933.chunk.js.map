{"version":3,"file":"static/js/283.d1393933.chunk.js","mappings":"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","sources":["../node_modules/@ledgerhq/hw-app-eth/node_modules/bignumber.js/bignumber.mjs","../node_modules/@ledgerhq/hw-app-eth/src/utils.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/loadConfig.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/contracts.ts","../node_modules/@ledgerhq/cryptoassets/src/data/evm/index.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/erc20.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/nfts.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/index.ts","../node_modules/@ledgerhq/hw-app-eth/src/errors.ts","../node_modules/@ledgerhq/cryptoassets/src/data/eip712.ts","../node_modules/@ledgerhq/hw-app-eth/src/modules/EIP712/EIP712.utils.ts","../node_modules/@ledgerhq/hw-app-eth/src/modules/EIP712/index.ts","../node_modules/@ledgerhq/hw-app-eth/src/Eth.ts"],"sourcesContent":["/*\r\n *      bignumber.js v9.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var n,\r\n      i = 1,\r\n      m = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n","import { encode, decode } from \"@ethersproject/rlp\";\nimport { BigNumber } from \"bignumber.js\";\nimport { LedgerEthTransactionResolution } from \"./services/types\";\n\nexport function splitPath(path: string): number[] {\n  const result: number[] = [];\n  const components = path.split(\"/\");\n  components.forEach((element) => {\n    let number = parseInt(element, 10);\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n    result.push(number);\n  });\n  return result;\n}\n\nexport function hexBuffer(str: string): Buffer {\n  return Buffer.from(str.startsWith(\"0x\") ? str.slice(2) : str, \"hex\");\n}\n\nexport function maybeHexBuffer(\n  str: string | null | undefined\n): Buffer | null | undefined {\n  if (!str) return null;\n  return hexBuffer(str);\n}\n\nexport const decodeTxInfo = (rawTx: Buffer) => {\n  const VALID_TYPES = [1, 2];\n  const txType = VALID_TYPES.includes(rawTx[0]) ? rawTx[0] : null;\n  const rlpData = txType === null ? rawTx : rawTx.slice(1);\n  const rlpTx = decode(rlpData).map((hex) => Buffer.from(hex.slice(2), \"hex\"));\n  let chainIdTruncated = 0;\n  const rlpDecoded = decode(rlpData);\n\n  let decodedTx;\n  if (txType === 2) {\n    // EIP1559\n    decodedTx = {\n      data: rlpDecoded[7],\n      to: rlpDecoded[5],\n      chainId: rlpTx[0],\n    };\n  } else if (txType === 1) {\n    // EIP2930\n    decodedTx = {\n      data: rlpDecoded[6],\n      to: rlpDecoded[4],\n      chainId: rlpTx[0],\n    };\n  } else {\n    // Legacy tx\n    decodedTx = {\n      data: rlpDecoded[5],\n      to: rlpDecoded[3],\n      // Default to 1 for non EIP 155 txs\n      chainId: rlpTx.length > 6 ? rlpTx[6] : Buffer.from(\"0x01\", \"hex\"),\n    };\n  }\n\n  const chainIdSrc = decodedTx.chainId;\n  let chainId = new BigNumber(0);\n  if (chainIdSrc) {\n    // Using BigNumber because chainID could be any uint256.\n    chainId = new BigNumber(chainIdSrc.toString(\"hex\"), 16);\n    const chainIdTruncatedBuf = Buffer.alloc(4);\n    if (chainIdSrc.length > 4) {\n      chainIdSrc.copy(chainIdTruncatedBuf);\n    } else {\n      chainIdSrc.copy(chainIdTruncatedBuf, 4 - chainIdSrc.length);\n    }\n    chainIdTruncated = chainIdTruncatedBuf.readUInt32BE(0);\n  }\n\n  let vrsOffset = 0;\n  if (txType === null && rlpTx.length > 6) {\n    const rlpVrs = Buffer.from(encode(rlpTx.slice(-3)).slice(2), \"hex\");\n\n    vrsOffset = rawTx.length - (rlpVrs.length - 1);\n\n    // First byte > 0xf7 means the length of the list length doesn't fit in a single byte.\n    if (rlpVrs[0] > 0xf7) {\n      // Increment vrsOffset to account for that extra byte.\n      vrsOffset++;\n\n      // Compute size of the list length.\n      const sizeOfListLen = rlpVrs[0] - 0xf7;\n\n      // Increase rlpOffset by the size of the list length.\n      vrsOffset += sizeOfListLen - 1;\n    }\n  }\n\n  return {\n    decodedTx,\n    txType,\n    chainId,\n    chainIdTruncated,\n    vrsOffset,\n  };\n};\n\n/**\n * @ignore for the README\n *\n * Helper to convert an integer as a hexadecimal string with the right amount of digits\n * to respect the number of bytes given as parameter\n *\n * @param int Integer\n * @param bytes Number of bytes it should be represented as (1 byte = 2 caraters)\n * @returns The given integer as an hexa string padded with the right number of 0\n */\nexport const intAsHexBytes = (int: number, bytes: number): string =>\n  int.toString(16).padStart(2 * bytes, \"0\");\n\n/**\n * @ignore for the README\n *\n * List of selectors (hexadecimal representation of the used method's signature) related to\n * ERC20 (Tokens), ERC721/ERC1155 (NFT).\n * You can verify and/or get more info about them on http://4byte.directory\n */\n\nexport enum ERC20_CLEAR_SIGNED_SELECTORS {\n  APPROVE = \"0x095ea7b3\",\n  TRANSFER = \"0xa9059cbb\",\n}\n\nexport enum ERC721_CLEAR_SIGNED_SELECTORS {\n  APPROVE = \"0x095ea7b3\",\n  SET_APPROVAL_FOR_ALL = \"0xa22cb465\",\n  TRANSFER_FROM = \"0x23b872dd\",\n  SAFE_TRANSFER_FROM = \"0x42842e0e\",\n  SAFE_TRANSFER_FROM_WITH_DATA = \"0xb88d4fde\",\n}\n\nexport enum ERC1155_CLEAR_SIGNED_SELECTORS {\n  SET_APPROVAL_FOR_ALL = \"0xa22cb465\",\n  SAFE_TRANSFER_FROM = \"0xf242432a\",\n  SAFE_BATCH_TRANSFER_FROM = \"0x2eb2c2d6\",\n}\n\nexport const tokenSelectors = Object.values(ERC20_CLEAR_SIGNED_SELECTORS);\nexport const nftSelectors = [\n  ...Object.values(ERC721_CLEAR_SIGNED_SELECTORS),\n  ...Object.values(ERC1155_CLEAR_SIGNED_SELECTORS),\n];\n\nexport const mergeResolutions = (\n  oldResolution: Partial<LedgerEthTransactionResolution>,\n  newResolution: Partial<LedgerEthTransactionResolution>\n): LedgerEthTransactionResolution => {\n  const resolutions: LedgerEthTransactionResolution = {\n    nfts: [],\n    erc20Tokens: [],\n    externalPlugin: [],\n    plugin: [],\n  };\n\n  for (const key in oldResolution) {\n    resolutions[key].push(...oldResolution[key]);\n  }\n\n  for (const key in newResolution) {\n    resolutions[key].push(...newResolution[key]);\n  }\n\n  return resolutions;\n};\n","import type { LoadConfig } from \"../types\";\n\nconst defaultLoadConfig = {\n  nftExplorerBaseURL: \"https://nft.api.live.ledger.com/v1/ethereum\",\n  pluginBaseURL: \"https://cdn.live.ledger.com\",\n  extraPlugins: null,\n  cryptoassetsBaseURL: \"https://cdn.live.ledger.com/cryptoassets\",\n};\n\nexport function getLoadConfig(userLoadConfig?: LoadConfig): LoadConfig {\n  return {\n    ...defaultLoadConfig,\n    ...userLoadConfig,\n  };\n}\n","import axios from \"axios\";\nimport { getLoadConfig } from \"./loadConfig\";\nimport type { LoadConfig } from \"../types\";\nimport { log } from \"@ledgerhq/logs\";\n\ntype ContractMethod = {\n  payload: string;\n  signature: string;\n  plugin: string;\n  erc20OfInterest: string[];\n  abi: any;\n};\n\n/**\n * Retrieve the metadatas a given contract address and a method selector\n */\nexport const loadInfosForContractMethod = async (\n  contractAddress: string,\n  selector: string,\n  chainId: number,\n  userLoadConfig: LoadConfig\n): Promise<ContractMethod | undefined> => {\n  const { pluginBaseURL, extraPlugins } = getLoadConfig(userLoadConfig);\n\n  let data = {};\n\n  if (pluginBaseURL) {\n    const url = `${pluginBaseURL}/plugins/ethereum.json`;\n    data = await axios\n      .get(`${pluginBaseURL}/plugins/ethereum.json`)\n      .then((r) => r.data as any)\n      .catch((e) => {\n        log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n        return null;\n      });\n  }\n\n  if (extraPlugins) {\n    data = { ...data, ...extraPlugins };\n  }\n\n  if (!data) return;\n\n  const lcSelector = selector.toLowerCase();\n  const lcContractAddress = contractAddress.toLowerCase();\n\n  if (lcContractAddress in data) {\n    const contractSelectors = data[lcContractAddress];\n\n    if (lcSelector in contractSelectors) {\n      return {\n        payload: contractSelectors[lcSelector][\"serialized_data\"],\n        signature: contractSelectors[lcSelector][\"signature\"],\n        plugin: contractSelectors[lcSelector][\"plugin\"],\n        erc20OfInterest: contractSelectors[lcSelector][\"erc20OfInterest\"],\n        abi: contractSelectors[\"abi\"],\n      };\n    }\n  }\n};\n","import arbitrum_tokens from \"./42161/erc20.json\";\nimport bsc_tokens from \"./56/erc20.json\";\nimport cronos_tokens from \"./25/erc20.json\";\nimport ethereum_tokens from \"./1/erc20.json\";\nimport ethereum_goerli_tokens from \"./5/erc20.json\";\nimport ethereum_rinkeby_tokens from \"./4/erc20.json\";\nimport ethereum_ropsten_tokens from \"./3/erc20.json\";\nimport ethereum_sepolia_tokens from \"./11155111/erc20.json\";\nimport fantom_tokens from \"./250/erc20.json\";\nimport flare_tokens from \"./14/erc20.json\";\nimport moonbeam_tokens from \"./1284/erc20.json\";\nimport optimism_tokens from \"./10/erc20.json\";\nimport polygon_tokens from \"./137/erc20.json\";\nimport songbird_tokens from \"./19/erc20.json\";\nimport arbitrum_signatures from \"./42161/erc20-signatures.json\";\nimport bsc_signatures from \"./56/erc20-signatures.json\";\nimport cronos_signatures from \"./25/erc20-signatures.json\";\nimport ethereum_signatures from \"./1/erc20-signatures.json\";\nimport ethereum_goerli_signatures from \"./5/erc20-signatures.json\";\nimport ethereum_rinkeby_signatures from \"./4/erc20-signatures.json\";\nimport ethereum_ropsten_signatures from \"./3/erc20-signatures.json\";\nimport ethereum_sepolia_signatures from \"./11155111/erc20-signatures.json\";\nimport fantom_signatures from \"./250/erc20-signatures.json\";\nimport flare_signatures from \"./14/erc20-signatures.json\";\nimport moonbeam_signatures from \"./1284/erc20-signatures.json\";\nimport optimism_signatures from \"./10/erc20-signatures.json\";\nimport polygon_signatures from \"./137/erc20-signatures.json\";\nimport songbird_signatures from \"./19/erc20-signatures.json\";\n\nexport const tokens = {\n  42161: arbitrum_tokens,\n  56: bsc_tokens,\n  25: cronos_tokens,\n  1: ethereum_tokens,\n  5: ethereum_goerli_tokens,\n  4: ethereum_rinkeby_tokens,\n  3: ethereum_ropsten_tokens,\n  11155111: ethereum_sepolia_tokens,\n  250: fantom_tokens,\n  14: flare_tokens,\n  1284: moonbeam_tokens,\n  10: optimism_tokens,\n  137: polygon_tokens,\n  19: songbird_tokens,\n};\n\nexport const signatures = {\n  42161: arbitrum_signatures,\n  56: bsc_signatures,\n  25: cronos_signatures,\n  1: ethereum_signatures,\n  5: ethereum_goerli_signatures,\n  4: ethereum_rinkeby_signatures,\n  3: ethereum_ropsten_signatures,\n  11155111: ethereum_sepolia_signatures,\n  250: fantom_signatures,\n  14: flare_signatures,\n  1284: moonbeam_signatures,\n  10: optimism_signatures,\n  137: polygon_signatures,\n  19: songbird_signatures,\n};\n\nexport default {\n  tokens,\n  signatures,\n};\n","import axios from \"axios\";\nimport { log } from \"@ledgerhq/logs\";\nimport { signatures as signaturesByChainId } from \"@ledgerhq/cryptoassets/data/evm/index\";\nimport { getLoadConfig } from \"./loadConfig\";\nimport { LoadConfig } from \"../types\";\n\nconst asContractAddress = (addr: string) => {\n  const a = addr.toLowerCase();\n  return a.startsWith(\"0x\") ? a : \"0x\" + a;\n};\n\nexport const findERC20SignaturesInfo = async (\n  userLoadConfig: LoadConfig,\n  chainId: number\n): Promise<string | null> => {\n  const { cryptoassetsBaseURL } = getLoadConfig(userLoadConfig);\n  if (!cryptoassetsBaseURL) return null;\n\n  const url = `${cryptoassetsBaseURL}/evm/${chainId}/erc20-signatures.json`;\n  const blob = await axios\n    .get<string>(url)\n    .then(({ data }) => {\n      if (!data || typeof data !== \"string\") {\n        throw new Error(\n          `ERC20 signatures for chainId ${chainId} file is malformed ${url}`\n        );\n      }\n      return data;\n    })\n    .catch((e) => {\n      log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n      return null;\n    });\n\n  return blob;\n};\n\n/**\n * Retrieve the token information by a given contract address if any\n */\nexport const byContractAddressAndChainId = (\n  contract: string,\n  chainId: number,\n  erc20SignaturesBlob?: string | null\n): ReturnType<API[\"byContractAndChainId\"]> => {\n  // If we are able to fetch data from s3 bucket that contains dynamic CAL\n  if (erc20SignaturesBlob) {\n    try {\n      return parse(erc20SignaturesBlob).byContractAndChainId(\n        asContractAddress(contract),\n        chainId\n      );\n    } catch (e) {\n      return get(chainId)?.byContractAndChainId(\n        asContractAddress(contract),\n        chainId\n      );\n    }\n  }\n\n  // the static fallback when dynamic cal is not provided\n  return get(chainId)?.byContractAndChainId(\n    asContractAddress(contract),\n    chainId\n  );\n};\n\nexport type TokenInfo = {\n  contractAddress: string;\n  ticker: string;\n  decimals: number;\n  chainId: number;\n  signature: Buffer;\n  data: Buffer;\n};\nexport type API = {\n  byContractAndChainId: (\n    addr: string,\n    id: number\n  ) => TokenInfo | null | undefined;\n  list: () => TokenInfo[];\n};\n\nconst parse = (erc20SignaturesBlob: string): API => {\n  const buf = Buffer.from(erc20SignaturesBlob, \"base64\");\n  const map = {};\n  const entries: TokenInfo[] = [];\n  let i = 0;\n\n  while (i < buf.length) {\n    const length = buf.readUInt32BE(i);\n    i += 4;\n    const item = buf.slice(i, i + length);\n    let j = 0;\n    const tickerLength = item.readUInt8(j);\n    j += 1;\n    const ticker = item.slice(j, j + tickerLength).toString(\"ascii\");\n    j += tickerLength;\n    const contractAddress = asContractAddress(\n      item.slice(j, j + 20).toString(\"hex\")\n    );\n    j += 20;\n    const decimals = item.readUInt32BE(j);\n    j += 4;\n    const chainId = item.readUInt32BE(j);\n    j += 4;\n    const signature = item.slice(j);\n    const entry: TokenInfo = {\n      ticker,\n      contractAddress,\n      decimals,\n      chainId,\n      signature,\n      data: item,\n    };\n    entries.push(entry);\n    map[String(chainId) + \":\" + contractAddress] = entry;\n    i += length;\n  }\n\n  return {\n    list: () => entries,\n    byContractAndChainId: (contractAddress, chainId) =>\n      map[String(chainId) + \":\" + contractAddress],\n  };\n};\n\n// this internal get() will lazy load and cache the data from the erc20 data blob\nconst get: (chainId: number) => API | null = (() => {\n  const cache: Record<number, API> = {};\n  return (chainId) => {\n    if (cache[chainId]) return cache[chainId];\n\n    const signatureBlob: string | undefined = signaturesByChainId[chainId];\n    if (!signatureBlob) return null;\n\n    const api = parse(signatureBlob);\n    cache[chainId] = api;\n    return api;\n  };\n})();\n","import axios from \"axios\";\nimport { getLoadConfig } from \"./loadConfig\";\nimport type { LoadConfig } from \"../types\";\nimport { log } from \"@ledgerhq/logs\";\n\ntype NftInfo = {\n  contractAddress: string;\n  collectionName: string;\n  data: string;\n};\n\ntype BackendResponse = {\n  payload: string;\n};\n\nexport const getNFTInfo = async (\n  contractAddress: string,\n  chainId: number,\n  userLoadConfig: LoadConfig\n): Promise<NftInfo | undefined> => {\n  const { nftExplorerBaseURL } = getLoadConfig(userLoadConfig);\n  if (!nftExplorerBaseURL) return;\n  const url = `${nftExplorerBaseURL}/${chainId}/contracts/${contractAddress}`;\n  const response = await axios\n    .get<BackendResponse>(url)\n    .then((r) => r.data)\n    .catch((e) => {\n      log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n      return null;\n    });\n  if (!response) return;\n\n  // APDU response specification: https://ledgerhq.atlassian.net/wiki/spaces/WALLETCO/pages/3269984297/NFT-1+NFT+Backend+design#NFT-Metadata-BLOB\n  const payload = response[\"payload\"];\n  // Collection name length position: 3rd byte -> caracter 4 to 6\n  const collectionNameLength = parseInt(payload.slice(4, 6), 16);\n  const collectionNameHex = payload.substr(6, collectionNameLength * 2);\n  const collectionName = collectionNameHex\n    .match(/.{2}/g) // split every 2 characters\n    ?.reduce(\n      (acc, curr) => (acc += String.fromCharCode(parseInt(curr, 16))),\n      \"\"\n    ); // convert hex to string\n\n  return {\n    contractAddress: contractAddress,\n    collectionName: collectionName || \"\",\n    data: payload,\n  };\n};\n\nexport const loadNftPlugin = async (\n  contractAddress: string,\n  selector: string,\n  chainId: number,\n  userLoadConfig: LoadConfig\n): Promise<string | undefined> => {\n  const { nftExplorerBaseURL } = getLoadConfig(userLoadConfig);\n  if (!nftExplorerBaseURL) return;\n  const url = `${nftExplorerBaseURL}/${chainId}/contracts/${contractAddress}/plugin-selector/${selector}`;\n\n  const response = await axios\n    .get<BackendResponse>(url)\n    .then((r) => r.data)\n    .catch((e) => {\n      log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n      return null;\n    });\n  if (!response) return;\n\n  const payload = response[\"payload\"];\n  return payload;\n};\n","// This implements the resolution of a Transaction using Ledger's own API\nimport { log } from \"@ledgerhq/logs\";\nimport { Interface } from \"@ethersproject/abi\";\n\nimport {\n  LedgerEthTransactionResolution,\n  LedgerEthTransactionService,\n  LoadConfig,\n} from \"../types\";\nimport { loadInfosForContractMethod } from \"./contracts\";\nimport { byContractAddressAndChainId, findERC20SignaturesInfo } from \"./erc20\";\nimport { getNFTInfo, loadNftPlugin } from \"./nfts\";\nimport {\n  decodeTxInfo,\n  tokenSelectors,\n  nftSelectors,\n  mergeResolutions,\n} from \"../../utils\";\n\ntype potentialResolutions = {\n  token: boolean | undefined;\n  nft: boolean | undefined;\n  externalPlugins: boolean | undefined;\n};\n\n/**\n * @ignore for external documentation\n *\n * Providing additionnal data for some transactions (Token or NFT related) can enable clear signing\n * of initially impossible to decode data.\n * This method will add necessary APDUs to the resolution paramter in order to provide this data to the nano app\n */\nconst getAdditionalDataForContract = async (\n  contractAddress: string,\n  chainIdTruncated: number,\n  loadConfig: LoadConfig,\n  shouldResolve: potentialResolutions\n): Promise<Pick<LedgerEthTransactionResolution, \"nfts\" | \"erc20Tokens\">> => {\n  const resolution: Pick<\n    LedgerEthTransactionResolution,\n    \"nfts\" | \"erc20Tokens\"\n  > = {\n    nfts: [],\n    erc20Tokens: [],\n  };\n\n  if (shouldResolve.nft) {\n    const nftInfo = await getNFTInfo(\n      contractAddress,\n      chainIdTruncated,\n      loadConfig\n    );\n\n    if (nftInfo) {\n      log(\n        \"ethereum\",\n        \"loaded nft info for \" +\n          nftInfo.contractAddress +\n          \" (\" +\n          nftInfo.collectionName +\n          \")\"\n      );\n      resolution.nfts.push(nftInfo.data);\n    } else {\n      log(\"ethereum\", \"couldn't load nft info for \" + contractAddress);\n    }\n  }\n\n  if (shouldResolve.token) {\n    const erc20SignaturesBlob = await findERC20SignaturesInfo(\n      loadConfig,\n      chainIdTruncated\n    );\n    const erc20Info = byContractAddressAndChainId(\n      contractAddress,\n      chainIdTruncated,\n      erc20SignaturesBlob\n    );\n\n    if (erc20Info) {\n      log(\n        \"ethereum\",\n        \"loaded erc20token info for \" +\n          erc20Info.contractAddress +\n          \" (\" +\n          erc20Info.ticker +\n          \")\"\n      );\n      resolution.erc20Tokens.push(erc20Info.data.toString(\"hex\"));\n    } else {\n      log(\"ethereum\", \"couldn't load erc20token info for \" + contractAddress);\n    }\n  }\n\n  return resolution;\n};\n\n/**\n * @ignore for external documentation\n *\n * Depending on the transaction, it might be necessary to load internal plugins in the nano app\n * in order to clear sign it.\n * This method will add necessary APDUs to the resolution parameter in order to load those internal plugins\n */\nconst loadNanoAppPlugins = async (\n  contractAddress: string,\n  selector: string,\n  decodedTx,\n  chainIdTruncated: number,\n  loadConfig: LoadConfig,\n  shouldResolve: potentialResolutions\n): Promise<LedgerEthTransactionResolution> => {\n  let resolution: LedgerEthTransactionResolution = {\n    externalPlugin: [],\n    plugin: [],\n    nfts: [],\n    erc20Tokens: [],\n  };\n\n  if (shouldResolve.nft) {\n    const nftPluginPayload = await loadNftPlugin(\n      contractAddress,\n      selector,\n      chainIdTruncated,\n      loadConfig\n    );\n\n    if (nftPluginPayload) {\n      resolution.plugin.push(nftPluginPayload);\n    } else {\n      log(\n        \"ethereum\",\n        \"no NFT plugin payload for selector \" +\n          selector +\n          \" and address \" +\n          contractAddress\n      );\n    }\n  }\n\n  if (shouldResolve.externalPlugins) {\n    const contractMethodInfos = await loadInfosForContractMethod(\n      contractAddress,\n      selector,\n      chainIdTruncated,\n      loadConfig\n    );\n\n    if (contractMethodInfos) {\n      const { plugin, payload, signature, erc20OfInterest, abi } =\n        contractMethodInfos;\n\n      if (plugin) {\n        log(\"ethereum\", \"found plugin for \" + selector);\n        resolution.externalPlugin.push({ payload, signature });\n      }\n\n      if (erc20OfInterest && erc20OfInterest.length && abi) {\n        const contract = new Interface(abi);\n        const args = contract.parseTransaction(decodedTx).args;\n\n        for (const path of erc20OfInterest) {\n          const erc20ContractAddress = path.split(\".\").reduce((value, seg) => {\n            if (seg === \"-1\" && Array.isArray(value)) {\n              return value[value.length - 1];\n            }\n            return value[seg];\n          }, args) as unknown as string; // impossible(?) to type correctly as the initializer is different from the returned type\n\n          const externalPluginResolution = await getAdditionalDataForContract(\n            erc20ContractAddress,\n            chainIdTruncated,\n            loadConfig,\n            {\n              nft: false,\n              externalPlugins: false,\n              token: true, // enforcing resolution of tokens for external plugins that need info on assets (e.g. for a swap)\n            }\n          );\n          resolution = mergeResolutions(resolution, externalPluginResolution);\n        }\n      }\n    } else {\n      log(\"ethereum\", \"no infos for selector \" + selector);\n    }\n  }\n\n  return resolution;\n};\n\nconst ledgerService: LedgerEthTransactionService = {\n  resolveTransaction: async (rawTxHex, loadConfig, resolutionConfig) => {\n    const rawTx = Buffer.from(rawTxHex, \"hex\");\n    const { decodedTx, chainIdTruncated } = decodeTxInfo(rawTx);\n\n    const contractAddress = decodedTx.to;\n    const selector =\n      decodedTx.data.length >= 10 && decodedTx.data.substring(0, 10);\n\n    let pluginsResolution: Partial<LedgerEthTransactionResolution> = {};\n    let contractResolution: Partial<LedgerEthTransactionResolution> = {};\n    if (selector) {\n      const shouldResolve: potentialResolutions = {\n        token: resolutionConfig.erc20 && tokenSelectors.includes(selector),\n        nft: resolutionConfig.nft && nftSelectors.includes(selector),\n        externalPlugins: resolutionConfig.externalPlugins,\n      };\n\n      pluginsResolution = await loadNanoAppPlugins(\n        contractAddress,\n        selector,\n        decodedTx,\n        chainIdTruncated,\n        loadConfig,\n        shouldResolve\n      );\n\n      contractResolution = await getAdditionalDataForContract(\n        contractAddress,\n        chainIdTruncated,\n        loadConfig,\n        shouldResolve\n      );\n    }\n\n    return mergeResolutions(pluginsResolution, contractResolution);\n  },\n};\n\nexport default ledgerService;\n","import { createCustomErrorClass } from \"@ledgerhq/errors\";\n\nexport const EthAppPleaseEnableContractData = createCustomErrorClass(\n  \"EthAppPleaseEnableContractData\"\n);\nexport const EthAppNftNotSupported = createCustomErrorClass(\n  \"EthAppNftNotSupported\"\n);\n","export default {\"1:0x7f268357a8c2552623316e2562d90e642bb538e5:d8e4f2bd77f7562e99ea5df4adb127291a2bfbc225ae55450038f27f\":{\"contractName\":{\"label\":\"OpenSea Listing\",\"signature\":\"304402205f01e62b2331ecb9f1cb3f49a764d66015937cb20cb4c3af625146905ca4832402205076eeb4a74619b4552278836b548c8e525813faa9008399e43bfed7db016408\"},\"fields\":[{\"label\":\"Contract address\",\"path\":\"exchange\",\"signature\":\"3044022069df3b1c82dda9849a3df4cd0dd263d2b6c35e4fb8946865a35f5555830971b802201880d72b3d956867b597a2f5097d7f8799bad6e636d3de4030515634bba47155\"},{\"label\":\"Price\",\"path\":\"basePrice\",\"signature\":\"3045022100db49dbd8426193b6012781f43c3b445d1cf845d99d738091c1f068951728333402204326a2da5203f25deec049deba760bb31a86507c73fe6828c68e0db2eabfc966\"},{\"label\":\"Offer expiration\",\"path\":\"expirationTime\",\"signature\":\"3045022100e71a4921740fcdf4e489c517fc82f9b7e83cfbd675dff318acb91fbf8eaf175402203fac43650771c6523dad8d995ef414d035a92d262a9cf95885ef2704337a2382\"}]},\"1:0xe92b586627cca7a83dc919cc7127196d70f55a06:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3\":{\"contractName\":{\"label\":\"AugustusRFQ ERC20 order\",\"signature\":\"3044022043fb323d3a064faa38bcabad3a3f797dff60f55b49c19e350a9d0b1f980818e202205c3dc14efcc49adf915f195ff29fa02dfd9d08fca532b76086e501f9e0d133ed\"},\"fields\":[{\"label\":\"Nonce and metadata\",\"path\":\"nonceAndMeta\",\"signature\":\"304402205b674138eb50ddbfdd05768f2c641109f6c8f341d27e10ea12d59e083746cb330220521d739a49ee57ff9a41cf00adc631d3dd33e9ce2b23ce50759fb33c0ffce0a5\"},{\"label\":\"Expiration time\",\"path\":\"expiry\",\"signature\":\"304402203ba8d470649ae7cb5d02764fa48899ec0414075ed85cb9fd95e89ac5b3bb073e02200183233f30de996a8b87417a6febcbb56a544c38fd62b6f7702efa7e0d7b2ee3\"},{\"label\":\"Maker asset address\",\"path\":\"makerAsset\",\"signature\":\"304402206f3c4055bd431c1ceddce5b147c3b5acec950b267205da655fb3d331b9c070830220570c9cfdcc02b10abbf9a335ab6a4067ab7cae2ae8a443f795225a7c3981cc0a\"},{\"label\":\"Taker asset address\",\"path\":\"takerAsset\",\"signature\":\"3045022100fb93cbca6ee524729b138319a92316a37c56ae5f89b3d652af7f680c3f160df002203d1fc525b11cd30d2907f844d7774f49995b2be7e3ba2896dcd4a6e73c8a59d5\"},{\"label\":\"Maker address\",\"path\":\"maker\",\"signature\":\"3044022002e75adf4733bf28d532647c54fb0000415737db37b7e5674f9bb20179d01eea02203834ebcfe81d98e745572349bb0da4ffdc8ec846d35e3812119e9a3491462724\"},{\"label\":\"Taker address\",\"path\":\"taker\",\"signature\":\"3045022100966a77a69a7e0c060f154a8c7ed36087d8ba7da111d9bacc90b873421fe6a75c02207d92956d938a966cb98ddb6e8b3a56e4d8e7725182cf1bb02f03f67512460485\"},{\"label\":\"Maker amount\",\"path\":\"makerAmount\",\"signature\":\"304402207ece45c0993fa46316022cffbdf64307cef2caede370f27fdfd78471c3550dd002200da74e8b3b5201e654e7e4674f7471a333a104288fdf8cf80fc3122126113d1b\"},{\"label\":\"Taker amount\",\"path\":\"takerAmount\",\"signature\":\"3044022014183f10973ddc0ccb12472d2437e33f368f627b99022735044e5c4ebb4e345802203a3f5e8aa5c928981d2dabd0442342c605db1626dcd0d3ad5e3afcd98bb8c673\"}]},\"1:0xe92b586627cca7a83dc919cc7127196d70f55a06:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623\":{\"contractName\":{\"label\":\"AugustusRFQ NFT order\",\"signature\":\"304402206dfa1d54ee0a7ab236252618a5fac9c752152304f31838eab4ba4c6d2d3f844b02206658b1e9b2503577619080909be0f4c1d2a899b3d0085ed8c3f2a4309762dd94\"},\"fields\":[{\"label\":\"Nonce and metadata\",\"path\":\"nonceAndMeta\",\"signature\":\"3045022100ed9b0b91a8cace4d312f6d1bab076c057e954a9cd33c3dc5c350d030e41edd230220230e3050131157f6fc2fc578df7b1108f69d55d25ab837c661045877b148765b\"},{\"label\":\"Expiration time\",\"path\":\"expiry\",\"signature\":\"304402205d4913092612fe78d75c181f3ed28ac7808e25ab0131e73bebd91c08aac65e7902203d63f1fd4d5cc11b1f8aa2af0ec6a8440a0ed59d440237bce96ed87874c2a26d\"},{\"label\":\"Maker asset encoded\",\"path\":\"makerAsset\",\"signature\":\"304402205f9fb08bef206518e5bf48cb7fd968709a0ae317e903d9c87a41c934a0983af3022066264858ae4a1338d4daa1b4f9dc7376335ce9e57d4bed320b0d4c27a0012deb\"},{\"label\":\"Maker asset NFT ID\",\"path\":\"makerAssetId\",\"signature\":\"3045022100ac653732f2acece7c47588bfff9a1059dc69bd3fa7e387cfef8246eb0ae2a70902204ffd7f89cd7223f8e52b7c44b02ac4fa1d06017015304f1a3a7459b20d54a5e7\"},{\"label\":\"Taker asset encoded\",\"path\":\"takerAsset\",\"signature\":\"30450221008e59dfbed2dd4d1e2738b829d7a57fa23be737b652c0b01299f3d9482174aea80220138c8e948becda6dc1e7564358e574e7ac8d7016f2a1795059977f401535b27f\"},{\"label\":\"Taker asset NFT ID\",\"path\":\"takerAssetId\",\"signature\":\"304402203408e2bf0210fa4454baf46374cf876299578df056ddaaf5a907306804ca41cb0220056f910e3c500e4a8f55d5c09dceed9753a2ca7b49a9ade1955a598f4e64d657\"},{\"label\":\"Maker address\",\"path\":\"maker\",\"signature\":\"3045022100ce5db907819f4f36c77f1e3a849a3a6ac9483970128998d5add5941e1fcf6dc102200e1f26e08a3f48ef6fe1d40a4149cb8603c5e70e076755ddcf76894d31f2adc0\"},{\"label\":\"Taker address\",\"path\":\"taker\",\"signature\":\"30440220015799beef248e4eb12f95368ef44cfbaf65e43da1a4110623006e46157ab22c022055f962e02e4cbdc05bab79cfbee523da8ff9d16529c4e98755b15d45bb34a16b\"},{\"label\":\"Maker amount\",\"path\":\"makerAmount\",\"signature\":\"30450221008048cec54417376b3a659e3aeeb349a4352751a099443ea203b59e9d2cd954b702201b32704d89bd028a6794ef315bf2a204b7293f547d14282440f5aea041a27ee1\"},{\"label\":\"Taker amount\",\"path\":\"takerAmount\",\"signature\":\"3045022100dad584a953b3c56c67913e76f1a6626cb72620e23bd16f41b2817a95ddb0bccb02206189e3b49d9f3475bd52baff2a40c7f026daf1d2dad9cfaa403eb08030836090\"}]},\"1:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b\":{\"contractName\":{\"label\":\"List Order\",\"signature\":\"3045022100cfd82c26631445df34b327b31ad55ad7f26e0480ea7838ae83274ad83b8f9cd1022044b5a3db6b6052a5b818b1bc6cb28d523115033ca7ab3c4a269ec37e3cde890f\"},\"fields\":[{\"label\":\"Order maker address\",\"path\":\"maker\",\"signature\":\"30450221008ab1ef7012cf407a80348d6be16a98d375bf959de72f260cb92520dbb30fc2ce02200d9c0e02c8375d94077ebe16c849df5745654a1c499100286201407be47688f9\"},{\"label\":\"Order make asset value\",\"path\":\"makeAsset.value\",\"signature\":\"3044022018c3ea3b1768f348094f151f8e28171d1325d5cc1621478b23474f4695acf2d3022040ad4bb4c8c138857e426128488ee5a3df8fa0a7cfaf58e9858765a0f72a8a02\"},{\"label\":\"Order taker address\",\"path\":\"taker\",\"signature\":\"30440220482e1c1439ea879f243fdd47cf043bd271c7fb73ba095463e920ab34c38076c002207c095ec3307fa3a3ebcd125238caf3f7c50d196db444559d31c79916e514f370\"},{\"label\":\"Order take asset value\",\"path\":\"takeAsset.value\",\"signature\":\"304402205d33c23ab575fa613d37d7fabaa719f5aa4dacf8de0f299e83dd189eeabfc31d0220535f67346b8ed7d175193929aebead42b92921465c1474f482fce88bfd00323a\"},{\"label\":\"Order start time\",\"path\":\"start\",\"signature\":\"3045022100c178033effb772f141b46a9d5b5bcfc48468c6e5c499d8865043535947b1bb490220687dc9018a38c62e01c91e90fecf9e18febe995267d1bea27d3368f12f04bc9b\"},{\"label\":\"Order end time\",\"path\":\"end\",\"signature\":\"3044022074ecdea3c58a28565af3336de33390aa7e592e5108f6d9151dd000a90a5eb60a0220163362373d11f177e41b914dc10c93b76adfa4c27f4662179329e66b32f8f139\"}]},\"1:0x9757f2d2b135150bbeb65308d4a91804107cd8d6:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b\":{\"contractName\":{\"label\":\"List Order\",\"signature\":\"3045022100892ab54a425fa1306df530b5ffeab2944133f1fbc68b99b92e61abf5c5051d1002205eff72d6f2c65f7835bcb2c6593b772d0a45e152988b4379cdb52327ce5da382\"},\"fields\":[{\"label\":\"Order maker address\",\"path\":\"maker\",\"signature\":\"304402205990b238b291ad1bb3cce7d2acce868761c6a73fa79e87c05530813aac8eba5f02207408c5e30e840195677fa60d411d2c2bc76fbe15a7ad2506a4636f001708bec5\"},{\"label\":\"Order make asset value\",\"path\":\"makeAsset.value\",\"signature\":\"30440220646b1bd068a229a75f7f0558f03d2fbbe7dd441d318480dc8eb532c3452ed6a00220642fe4f065198bab191c682e55487cd6464a90c9527983dcd672d15a0a083d80\"},{\"label\":\"Order taker address\",\"path\":\"taker\",\"signature\":\"3044022014dff71fc22c0b53e918ceed99de5aa86cc49fffc22f271a9586a9db1197e413022001125d415ad2eef46353bd8e812248fbf3fc2b60fb5fc7dad3853c9d2c85c6a1\"},{\"label\":\"Order take asset value\",\"path\":\"takeAsset.value\",\"signature\":\"304402202416cd3b9b1b9b7fc4bd5434f0f8c54638d0f29e87f1f92de7006747f4e856aa02207afb4547d03de6247628f93c5ed49f9122e2780507bc601f5211c89c8905b93e\"},{\"label\":\"Order start time\",\"path\":\"start\",\"signature\":\"304502210095c5b1927e171ce8f0b74bd311cb0f66bff5e3d23a7eb52e1d6b696378defb2502204114def9ce15f2b698ea00d43bee8e8692568a6394e24c8e0b53c90c29ab7ad0\"},{\"label\":\"Order end time\",\"path\":\"end\",\"signature\":\"304402203f435338d8130399eaa6939c0cc8f4fc5efc92a34256ac450d6d55b0ac2e816f02204c116eb40b3c07810facd9117572147216fdb175b2ce31c6ef277501dff7f6d1\"}]},\"1:0xb66a603f4cfe17e3d27b87a8bfcad319856518b8:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9\":{\"contractName\":{\"label\":\"Lazy Mint ERC-1155\",\"signature\":\"304402206bd24ac8c5cfa2b75e16ea0c315295368a7f780c4ec062555079cfe48d583a8602204300f968037f9ea84919cdc8ad3a22103b04e00b9c4dffe5c34ebf13d1b769cc\"},\"fields\":[{\"label\":\"Token ID\",\"path\":\"tokenId\",\"signature\":\"304402206e18eac55b89b17b4706547807a864f6c1b37eee09fff4ccad54e9842eb1abaf02204ef2984f87d6c0ebab26352ce82f8040aae5bd259ae55d9921d609b3936d15dc\"},{\"label\":\"Token URI\",\"path\":\"tokenURI\",\"signature\":\"3044022067c04bf2be50a7660b11742d10dbcc84655c22a0d359c20b2abb54a4d23f2846022030bded842ae4208854c0d11d655b234465e2c9ee9fe9b1eb5074778ddcfa9426\"},{\"label\":\"Token Supply\",\"path\":\"supply\",\"signature\":\"3045022100fc4ab75ab184e564ea297da785d4a749b913e58706dff4e6c7ae49f72a7e9701022067bfead2e11a323beca3821a3ba310d705ebb128f45bee1f394dcc7e60af8043\"},{\"label\":\"Creator account address\",\"path\":\"creators.[].account\",\"signature\":\"304402203e5e5fe4636b283df4e4d027e8ba5e43d912f53125b052e603548fff051b37d702207ceae4257ccc801de3943fb68b1a0e2af546e12d3bc74481b7695a12de7eebd2\"},{\"label\":\"Creator value (10000 = 100%)\",\"path\":\"creators.[].value\",\"signature\":\"3044022065a51fd2cafd0013215fb703e27052320d35951e5f9d26a3c3d03a050b7088340220193e98ad9282a96e3e7b5e6813bb5989c31cded994fed35d5383e68738905c1e\"},{\"label\":\"Royalties account address\",\"path\":\"royalties.[].account\",\"signature\":\"304502210092d8aa5743b9fa52cc1d5caf4f83e65cf232b02394dae8e3056d29606377caf902205119918948d39a165950efb998e19aecb3bde611065e92fd5f5c10bafaacda22\"},{\"label\":\"Royalties value (10000 = 100%)\",\"path\":\"royalties.[].value\",\"signature\":\"3045022100b7cc93e7abfcc00efbfeeb49cef4d2ceb5521e1c97b2bdee882e011292964be902203d7ebd7c328961e1ca66aa16e8c61aeefa3bbbcad419bc65315658cdb425e5b9\"}]},\"1:0xc9154424b823b10579895ccbe442d41b9abd96ed:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b\":{\"contractName\":{\"label\":\"Lazy Mint ERC-721\",\"signature\":\"3044022001ca2f9abb569b76bfb8398ba150999d93fc6a02f5e637f4ac3a125b6c48b528022007ab8f1b776d1b2f5a0b44f90214b02f71c3535e468f03b681f133c3bc217946\"},\"fields\":[{\"label\":\"Token ID\",\"path\":\"tokenId\",\"signature\":\"3045022100e762ea781d76c81e5f3b28269e03f1cfe7e33b847dbe20a56289841579b0fb4f022033c6249fc155deb94850e6e30fd7fb854f07c63c2b8ffc8b3c7d412c01b8398d\"},{\"label\":\"Token URI\",\"path\":\"tokenURI\",\"signature\":\"3045022100dc369275a5b2d6a3c934221e9f7483082cd5c52bb1b41a802d260c54757cf29002206dfcd13e32357144ed68b90c2308208bfa699d95d917a97d8bf438aed08269bc\"},{\"label\":\"Creator account address\",\"path\":\"creators.[].account\",\"signature\":\"304502210089448beccdb19e680a7f8a6dd4f1e0dc8319b3458f0d5a491518bb97af0e1f5002200dc01550cc4d0d3398049938d2a498c142e2e82eb9086c7d6d6a8f1f90d1d25e\"},{\"label\":\"Creator value (10000 = 100%)\",\"path\":\"creators.[].value\",\"signature\":\"3044022026ebacc1dce44b2815c6e53d9030836a4768ba0019c4b6f9d8eb83d8699ffac3022076b9bc2f89daa7e5e21b294163e64ed25d2bdfe5f2373f6aefba4f6da1d92d3f\"},{\"label\":\"Royalties account address\",\"path\":\"royalties.[].account\",\"signature\":\"30440220626fdb56db8c34a282917aab1f7fddd36a060eb35f117ded7b675be946acfac002206770d35391e086e1ab31e9fd9cea07e90b09d38f0b882857e394283ecd6575a9\"},{\"label\":\"Royalties value (10000 = 100%)\",\"path\":\"royalties.[].value\",\"signature\":\"3045022100e22f440fe2bb06d77a0afc50366689ede59570dc91796305ea62e5ca5da5286c022074bdc3dc840c7314abcf6bbaf35fe5e20318c54a911e7508942fecd38b70db9e\"}]},\"1:0x72e9d9038ce484ee986fea183f8d8df93f9ada13:65b962ff5c94fe989fdc9169a5dbf3662e79747c3932616d9f0a39cc\":{\"contractName\":{\"label\":\"SmartCredit.io\",\"signature\":\"304402202d7247f61c8a08f5ea99fdbf628e88d487f12a6e4ed330bdc3e8a5886fee6f9202200524d6035cbdcd469b1d1d3fa8dcf83595112daf20f24286e1b0e3c820fa2127\"},\"fields\":[]},\"56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3\":{\"contractName\":{\"label\":\"AugustusRFQ ERC20 order\",\"signature\":\"3045022100cdd6ed9272614ffdedb2b2aa22418386928f1174a6214451d67b82c06b637d4102205ee814ca52cfbdab011e337727cfe91fa272b98246ecbfb1683bfc0de3086efc\"},\"fields\":[{\"label\":\"Nonce and metadata\",\"path\":\"nonceAndMeta\",\"signature\":\"3044022056e3fdb59c9ece3d411d03963edfcb9a186ccb753b4e984366e7ca6baa99b38902206a7267e31543659ba3bf8b796edec2d1c6f174a810b89862e43541f94b191eca\"},{\"label\":\"Expiration time\",\"path\":\"expiry\",\"signature\":\"3045022100a4cc77374944e947748dd36408f48f43a94e67436231fad62191554d1ea5ff0e022001baa4fc0587af310bebe1c0044d7b4280bb5537192736fa3805584c735a6710\"},{\"label\":\"Maker asset address\",\"path\":\"makerAsset\",\"signature\":\"30440220770b731ffb6091493ce2fcdb4163ad872add409a9c66e88e29b0d7a82b0ee79c02201e0130c1841c484e816b9f9ff3694eea3601e1569c1ddb87319b08d86e9823d5\"},{\"label\":\"Taker asset address\",\"path\":\"takerAsset\",\"signature\":\"304502210094b700c3383bf0d8740e09d23dac120addc1c21029746f672d8f8c8b3a2a2995022008b5d3af862f7fb0510321cd9ae4f7172ab3b347f6556b3da79e2a95950ff34b\"},{\"label\":\"Maker address\",\"path\":\"maker\",\"signature\":\"304402202dafdefb2181e5bbdf5816fc710400bae0846bc08dfc389ef8008048228e2fd0022002b89786ea578488cf6c6b751dac0c13dd6c2c57c8d6bb0fcb47a28d2b07b1b6\"},{\"label\":\"Taker address\",\"path\":\"taker\",\"signature\":\"304402204c27aac1c07e8bde8a998bf06acd5eaf40e874a9b128a4f19ee8c39ce45c9cbe0220380d9438d10ce81f7545f3de8530a19c1eda78e4683fc2145b9715eb260f1d66\"},{\"label\":\"Maker amount\",\"path\":\"makerAmount\",\"signature\":\"3045022100e7f19c15b49e6f40eddd2c8a24d8c55e9224262aa0b856a413f842fc5c0fc7d00220341e5eaf45d8335bb6143768b1c961b6c7e97897bda5ef485457020661ac3ae3\"},{\"label\":\"Taker amount\",\"path\":\"takerAmount\",\"signature\":\"3045022100e36cd43f82fc0f99ec2770a26b245f6af13623cee69670d68dd696ff76d4630e02202057a0dd1faee909037429ba7489ccf3891a38d29a4da04648441105c1e89048\"}]},\"56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623\":{\"contractName\":{\"label\":\"AugustusRFQ NFT order\",\"signature\":\"3044022045bb3ce0d61f428537754555a0d69cfc5554de2dd58c1c5cc7ae81abe073b1df022039ba8d7e1230c3851fc08db58cda6222c420dce4b8cf96725891906fc5f7539b\"},\"fields\":[{\"label\":\"Nonce and metadata\",\"path\":\"nonceAndMeta\",\"signature\":\"3044022020d30ebe13aa1235ea25dcc247a1c494a6aa2ac4f121aadc3beb874b9de4b75e022078efc82c2343d6165960fc252d10313550b6d9d1faeb6f2ff611c288fb53f364\"},{\"label\":\"Expiration time\",\"path\":\"expiry\",\"signature\":\"3045022100ee126c98d8ad5b000090d6c16131709618d803878a72ceb1f58f2b11b2e52324022076403ce3d181511afc9b59b3f4a0ce4de9ee76dd60c78eb61660d623294d4070\"},{\"label\":\"Maker asset encoded\",\"path\":\"makerAsset\",\"signature\":\"3045022100ed1f432fe0c33307e397f846970f7de0fc18098f3d5b4cc1a25844f75dbbfb9902204075ef8e6d6dae438dac2a7e3aace3e27bc7c67fe22728395f92888e68361f20\"},{\"label\":\"Maker asset NFT ID\",\"path\":\"makerAssetId\",\"signature\":\"3044022022be34e598b158445f7ff6a5565b04627b61789339aa956b03f5c8dcb81e0ca102201b970d57742618204906414d7d23dc42e9e566776e7bda9060bcde335817a8ce\"},{\"label\":\"Taker asset encoded\",\"path\":\"takerAsset\",\"signature\":\"304402203ec8a77927b84388d5a0ba1bb0bfa38fcb862b8c43d988bbbbccbd547a4ae38e022002f2f736d3cfbf42829b750af704323f29b1eedcbde789c49052521ec47bafee\"},{\"label\":\"Taker asset NFT ID\",\"path\":\"takerAssetId\",\"signature\":\"304402205defad5bc1514f254cece6e8dfbfe3b68c3818bef6d4268b40c59858a6a2187502206767bb96c040e523dfd88724a0ce4b4f6bde73c02a286772f2a73c973dab0bab\"},{\"label\":\"Maker address\",\"path\":\"maker\",\"signature\":\"3045022100a273a21625a130728e0448f53a047d50867a9ba5e4a285d7e06d98fb3bd655c2022061e93ce13cedef0ebe9bc9340b988d0fc7353e99e2ec28b77102a14b3a129479\"},{\"label\":\"Taker address\",\"path\":\"taker\",\"signature\":\"3045022100b74529d5cab0055f80732bcf7864f03db98bb9f779fa56171f3faafdfee2719e0220757505e2ba5df6184002e921f678f9f5bb073197652a45d86c6edf003067ce2c\"},{\"label\":\"Maker amount\",\"path\":\"makerAmount\",\"signature\":\"3045022100c14e1f90619be9cc92da927b1c908a18133b043e138d908bf81117e1fc73fe000220503047ae5e75ee53c0ed60601644ec09f430c613edc6ec72cdae4021d29438ce\"},{\"label\":\"Taker amount\",\"path\":\"takerAmount\",\"signature\":\"304402201096ca9ff9b886a77fcbc7fdc8ddfc0f42a9c8e7fccb783581ca3abc75ba61dd0220191d21eed8b4eed56975b580832a8b1891a5b674fe1a0e5d7314b7b6486d7104\"}]},\"137:0xDb46d1Dc155634FbC732f92E853b10B288AD5a1d:9e97b4d1d211350352bdbb5ef45c4cb52f988d93a2d4a8ec6e675d14\":{\"contractName\":{\"label\":\"Dispatch.xyz Follow Profile\",\"signature\":\"3044022008ad0a8cfe8c2630848f05e54ab93cfd1f5c301eb52cc74537d67a56751932bc02206dd3e78f5055b6c65a73905f840963b2f696afd04d6d472f4185dce9f6262821\"},\"fields\":[{\"label\":\"Profile Ids\",\"path\":\"profileIds\",\"signature\":\"3044022079ab31498b3ef74e744d5414f4c51334e00b20a5ad7c0a0ea6f463462d0a3699022079b29776df1f5243794cc128f19478ba586cd3b9378b5809740e9980763f8d8c\"},{\"label\":\"Data\",\"path\":\"datas\",\"signature\":\"3045022100c04fb22aecc349de63571095782ea34cde05e576095c980d5c86f054c1a248cc02207f5a41199516bed46221aebed4f0f377508d39d661ef7f6ea7b16877709aa4ce\"},{\"label\":\"Nonce\",\"path\":\"nonce\",\"signature\":\"304502210090109424df964562737fd1b5ce2f06b427856ae933c37f279af199f64fc530760220290cf4491328fc947f4d73f0032e151aa09caf8e085d0f0306fa355c0624dcac\"},{\"label\":\"Expiration Date\",\"path\":\"deadline\",\"signature\":\"3044022060825e02b00e4487917d073f701639b1ca812f21f1cf588fa8eb545a59b1fec8022073ca7918a322dfeb966dfe5239cc1a213c14e67a32f5f51e14e53c05f4149783\"}]},\"137:0x33c6eec1723b12c46732f7ab41398de45641fa42:2a4e40fa701836b6f11303b841424a6f3a47a5313c810b6651517fd1\":{\"contractName\":{\"label\":\"Mint\",\"signature\":\"30440220513be6e618840924202f319870537e0c1f1eb2e684c0a2c61152fc4c20b41c550220026e22f2cd2e12a6b48f97bbe362600556ce3fe5e8b292c05c89c591ea446e2b\"},\"fields\":[{\"label\":\"Receiver\",\"path\":\"receiver\",\"signature\":\"304502210089eeb41d1ba1235fe8319c6a248e1ac66d2598979d265e2d4cf16abc34ba47f302205a59e802e42b3268441980b4708600ab6e05e4c55de7407610987532cf73462e\"},{\"label\":\"Quest Type\",\"path\":\"categoryId\",\"signature\":\"3045022100bc6cc7ae4c2b3b4d43acea4c513e09d11736275fade4c0bd834d94f6ebd3893302203045ae14bfbaa4ef3bc0d9cf76f29cd4c90859464290632ee72b20f4b5c37f8b\"},{\"label\":\"Collection\",\"path\":\"collectionId\",\"signature\":\"304402207537d928b803882aac63dadb7fd512f4b959c0e1a737ce7594c9b9e0a0c661170220587298e0e8e2eae94da28564b1bdd7f62273d7e3707665a7966f1b04a15f061b\"}]},\"137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3\":{\"contractName\":{\"label\":\"AugustusRFQ ERC20 order\",\"signature\":\"3045022100a887a8b2f40695509ac6e040feb1a4a088fee459fd7e76cb137ea7c06b0a0b930220617b514271c05679e7ce04860ffca703ad2a21f4a45cce34b40e38624cf7ec13\"},\"fields\":[{\"label\":\"Nonce and metadata\",\"path\":\"nonceAndMeta\",\"signature\":\"30450221009fcaf300fef36d00f64c3d5e92991e67fd93862f8eddba0b8472568b5c66e38d02203a26f3aad1c0cf6638dea961f8f5e4ba5f72272bc7f1e33afac897a3b5b51604\"},{\"label\":\"Expiration time\",\"path\":\"expiry\",\"signature\":\"3045022100984f166ee1744b4b69e24ed1e49fbaf43a24e82dd5b7d2103cf8ca854ff49e0a0220326ab17879b902521fa032a89c5c984e52bf3e31c8336cd67a1ce198d7c36e2d\"},{\"label\":\"Maker asset address\",\"path\":\"makerAsset\",\"signature\":\"3045022100f4ec14863e0512804fc69d82fe17bf576340ae8005d0c48520cefb3254b102f702205fea57ba3919071157ff3ee0c93472e936f1dc079bcb0c447bb87ad86e505ea2\"},{\"label\":\"Taker asset address\",\"path\":\"takerAsset\",\"signature\":\"3045022100957771ad2eced04af9750c1df10cc5b5b913fd3f9fe83408baa766573ed34221022055a1ba30b3a8895a011719ac54adaf7bfd24fe2c5041a90348097f719bed0dc7\"},{\"label\":\"Maker address\",\"path\":\"maker\",\"signature\":\"3045022100f25edb42b652d5c645de567c201a1e6a64b0d6b23274cde08046d955cd2573860220129bbded4e33150cc38b93033b2d70d5fa141066f1ed7c603b5515ab8cdb2fca\"},{\"label\":\"Taker address\",\"path\":\"taker\",\"signature\":\"3045022100c8790938f88557986c769102d31603849dc8c560cc03a45db99ddc90d69306690220295950348fffc22fbb898d75e768edb1edcb1c8772cc3518ff9687e957a87e50\"},{\"label\":\"Maker amount\",\"path\":\"makerAmount\",\"signature\":\"3045022100b5e1dc4e5f69fd80611a4f5c7d306ac6aca4a2a2103515d761557e532884ca8702204b86dd5c323345242f1c1b263ba035932a10a5b0eeaddbc79fa10db27aa9d7d4\"},{\"label\":\"Taker amount\",\"path\":\"takerAmount\",\"signature\":\"3045022100bd1de29559311612a7d0bca3c61b10d9ddf0753be7c372ebb95e0b69b674c01102207d685aa2b0a2309ad094a5fc8e09210681781f9a4294e4c7973d0ecf1adabcbd\"}]},\"137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623\":{\"contractName\":{\"label\":\"AugustusRFQ NFT order\",\"signature\":\"3045022100b9798555ab901ed3cefcdec4aabd9418f3561fba299833ceadbf9d3043a996a7022037388e3956ce02764088733d92384fb4e669754b037e8a913995d761ac0d5cdf\"},\"fields\":[{\"label\":\"Nonce and metadata\",\"path\":\"nonceAndMeta\",\"signature\":\"3045022100b57c5877ce124196316dde0e2fb0f18258521cc2c7c27405bde78008bca27d8d02202053d4696b28b40fd1a16e7a179020c7d633e4548da0bd92f9442c24da12d510\"},{\"label\":\"Expiration time\",\"path\":\"expiry\",\"signature\":\"3045022100b35db3057953f7b747d4423f688d8a3fb3101729f37af65c4ac4fc9a7ee8fb8d022033f4d70422b437593f00af75828ff067f914f825bd3075f8462080bf4e0f9ae0\"},{\"label\":\"Maker asset encoded\",\"path\":\"makerAsset\",\"signature\":\"3045022100e2e0f280d333692a776343669d6f17dac3ded8935d5875964d5ac6b05bb093f80220589afeaf7a7baf3b5964b439111d07deafe25be8a32b43640a2cc073a7257aa6\"},{\"label\":\"Maker asset NFT ID\",\"path\":\"makerAssetId\",\"signature\":\"304302201e35015cc3bbd6ca28bd57eb970cf1eb05826a4988c1238e951574f8804f28c2021f0cae62ed8199b725a39e714e60c92fe522ac7992c3dc1a27866f749547de89\"},{\"label\":\"Taker asset encoded\",\"path\":\"takerAsset\",\"signature\":\"304502210094d2c3de8a61bf940dc5c8132070ee0566ab6d0059f1eff5aec3ba1ec04740a202200fb41470f2693427466a9ce580d5c9ff12243f848351c7aa2ac070c1618896e2\"},{\"label\":\"Taker asset NFT ID\",\"path\":\"takerAssetId\",\"signature\":\"3045022100f9b55eafa8d519298960b040f36a7479ace9d43b677d243d22c3194147dfa033022025f7a2962e342ee1572f814cd8b8cba1382deb20054475ba9df9dd321bc9fcc7\"},{\"label\":\"Maker address\",\"path\":\"maker\",\"signature\":\"304402201aa4061287e14289ff1c4fdffe8ddd811775aae4bb6577970ebb87735102a5ba02207d9c89254e9698a7aff849a87c2a163ce9793212a5fe3745e446393c6a71ec46\"},{\"label\":\"Taker address\",\"path\":\"taker\",\"signature\":\"304402207ca92ed4b465b4fe1d4b2dd65561165a70b54c8dd132dcf15031c799c8ab22fe022041d7bd664003c62e949cdb0ed09a744ac6adce7d6e676e4de22437a830edcf74\"},{\"label\":\"Maker amount\",\"path\":\"makerAmount\",\"signature\":\"3044022038901c22513acf13bac39f553c763d26ee32c3e6e215ca3cb69da0274ca901c702204fce716fc91f3cb7ac7da446bd3432020d002c5a62c48d199d7b4379fe93c9f1\"},{\"label\":\"Taker amount\",\"path\":\"takerAmount\",\"signature\":\"304402203361ee1439f545c9664035be586925b2fb4878de9dbcdc7a519b5eb95a44ca6e02205f905942febcf5342577b5af149ea4deea5e6d0e1ae17356bb1d0628d8ccf8ff\"}]},\"137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b\":{\"contractName\":{\"label\":\"Lazy Mint ERC-721\",\"signature\":\"3045022100977ad189fb3f8c809caef784ca6c66fcda1c98274d92219b07416e43f43187af022051b069af307aef8d7b3b3aaf815eaf0e7e91c55f994616f3ea88293dd69f217c\"},\"fields\":[{\"label\":\"Token ID\",\"path\":\"tokenId\",\"signature\":\"30440220403fc14ad30f3f3ea597f75d88371c83ef2e10130a5143faeda87dc507fb9aa2022056202bc01b283e0f625b82c73db84ca3f17eef6d9eea89709aa0a88eae17096c\"},{\"label\":\"Token URI\",\"path\":\"tokenURI\",\"signature\":\"3045022100ce280997a6b39acd5dc3522401c205eb4719b4b43e7e673958f1c7b7b97a8f59022042eb6a70f1f45c771a697eb85b71ba58acc8074ac436d27840ec1325423d7e0c\"},{\"label\":\"Creator account address\",\"path\":\"creators.[].account\",\"signature\":\"3045022100f072042cace3b6ce605bbf0db7c3941928cb1ac5b6011bf47e04d76f57bbf392022054eb24e12319d88144a5e4d15a22271f2f1285d51f1b7f48bfc46ff1724c1741\"},{\"label\":\"Creator value (10000 = 100%)\",\"path\":\"creators.[].value\",\"signature\":\"3045022100b5517383a1f9f7281859e1e3ebcc588770ac08fe7961d83ebff3ff922674fa3302204c490c86d4d987875aa55c089a6c8bab4414a742bc7df19f67261a319d4d8c17\"},{\"label\":\"Royalties account address\",\"path\":\"royalties.[].account\",\"signature\":\"304402203660c0f0da24c89206e992e46c399d75d4e0981dd86bc145f4ed0d0ef469b47402200948f415f220225eaa67fb03749b2d5ea1ca8dfa76eda34d15c8f95746e30bd4\"},{\"label\":\"Royalties value (10000 = 100%)\",\"path\":\"royalties.[].value\",\"signature\":\"30440220747d86766a08b5bf78182dadf5ace3813cb8190266e5d1a72f2d94a387fd6ba5022006c69b8171a47fa15ef906fac4546856dd9467a8e1036d89e323614e64d29715\"}]},\"137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8\":{\"contractName\":{\"label\":\"Meta Transaction\",\"signature\":\"304402203e256b1407f82dbe395bee10e34bf5b995c3fa91737172b58fb41bcf8e006eea0220046543fdb21b8f65e050b57081915c083fab2abc1cdd663ce53b1c792dbfdfb2\"},\"fields\":[{\"label\":\"User Address\",\"path\":\"from\",\"signature\":\"304402204576c4999dd6a70df131dfd032667a42695d333a07b3599ec6d72843c54b48b502202cf424d057bffceadbbcd9023b2241bab6d2faf8b7324fbdf87f5daa9789fe38\"},{\"label\":\"Meta Transaction Nonce\",\"path\":\"nonce\",\"signature\":\"3045022100e094b23ebe8102c3c1aa5f802c33ed56f48bc94f6446b289ce358ea60ac375c0022013255aba7dc03fcfe30c7eacdf7a14ad0c51f389ddd51f7c4ba6e8d9bbf3dbb7\"}]},\"137:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b\":{\"contractName\":{\"label\":\"List Order\",\"signature\":\"30450221008b4ee6f1b492d19243afc4715d1f0cd9bf79a1aeb61fbf58f0e1323bce9dbc99022001a8a548f081eba23f33f03e20f478c33bd264efb3d8bfa16ce96e0b69ad5428\"},\"fields\":[{\"label\":\"Order maker address\",\"path\":\"maker\",\"signature\":\"3045022100f9851e9dfd9706740307e7829705b3e049390755e36b26a059f28d6bb47ac949022029a4efc35a2264fbe8f88eee1f83c430fb5e96bbf55e6deb31a60826cb0203b3\"},{\"label\":\"Order make asset value\",\"path\":\"makeAsset.value\",\"signature\":\"304402203bf13f37325f60973b02d5433857676ce135f94011047bbfdd2b97c30db1a069022029f409c7689891c222cdec4e63d143938ff73a4f6cffb0c5d56228d572d25fc2\"},{\"label\":\"Order taker address\",\"path\":\"taker\",\"signature\":\"3045022100bcdc72ba9f16a3ac3b73ad04f445a60958a7ea644511d9b917c5ae52be52c76b02206a68b66cc24c79e45687c07a201f7e910444a66a657c615c5854ac7065b0c6fc\"},{\"label\":\"Order take asset value\",\"path\":\"takeAsset.value\",\"signature\":\"3045022100c23622dc64172dfedc8fae04d5fa24e25f598bea659e703839dccf19736ba13a02207554a945d0e9c2816860ec7a6c4aab9088fb58f5316c1007d82f0add61693954\"},{\"label\":\"Order start time\",\"path\":\"start\",\"signature\":\"304402200cfe7613b90190a2c4dafaa661e5778a7756444e593a8e16105da315231df264022025e1daecd1752763decb7c51389a5eb97037536ecea3781e70ab428d75e1278b\"},{\"label\":\"Order end time\",\"path\":\"end\",\"signature\":\"3045022100d0047bfc769190c5a173c8bdf79a2fdef008f0674ac04f3a7fe100553f41dafc022030e7ef0a1dd8f6f4131da237f6c33a331add85dd747f7f9749806759767d0880\"}]},\"137:0x7f19564c35c681099c0c857a7141836cf7edaa53:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8\":{\"contractName\":{\"label\":\"Meta Transaction\",\"signature\":\"3045022100a2f95042a915f8ae76b54b1f012271a44356484ea6d4963b81e6806ed6fe80500220564155498a275d3fe5eec595fad3858cb2d7fa85178b98208d09a886a1485257\"},\"fields\":[{\"label\":\"User Address\",\"path\":\"from\",\"signature\":\"3044022051a39f6c809110faf6aa95fde98315c0c2b2cac34c31d927c058a2c0ebc158cd02206ccfac20b0327ac6e2ca08d5d53aef189b2bbe8bc010ae9002b25edcf43c2f06\"},{\"label\":\"Meta Transaction Nonce\",\"path\":\"nonce\",\"signature\":\"3045022100c1e15f064b9cf3d8cb2c6b297318c543066a12868419121c7062ccb7fb2f619b02202c3079f47124d6a25178d4b8431acd0bb08f44e9a0ec302e71bb4cc9b49a05a9\"}]},\"137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9\":{\"contractName\":{\"label\":\"Lazy Mint ERC-1155\",\"signature\":\"3045022100b85f48fd591345542f9e2271b4f33e71287a703eda9f9f7b54458dea60fb59fa0220661f4281eff16352e5e8db92a254b6b74ac0f20e3d41c9042a3c7c9f7397bd08\"},\"fields\":[{\"label\":\"Token ID\",\"path\":\"tokenId\",\"signature\":\"304402203dfd604170efb9379c36e17439f15f441b437aecf2d9abd0dc8b0c757c15d1fa022007fde07992c2b3797e7aacb7309cb60d494856d7a9d5866981a8948abf4d6a9c\"},{\"label\":\"Token URI\",\"path\":\"tokenURI\",\"signature\":\"3045022100a334814c15bfe1474472e56201aa83aa7016648b2a92aa2ae7c4d86b8a412eaf0220416654d59af289a253a96cbe4f5c9b75c2129d603d94cb3c7966cbea682f542a\"},{\"label\":\"Token Supply\",\"path\":\"supply\",\"signature\":\"3045022100a180585fc34f26b83b50c1d7609a0623b85b76267e393bf2871f41790487bf5902206c296108c56f2a1557a66a04f05bbcd7f0e0e0cd7a7a9764783673c0cda21d1f\"},{\"label\":\"Creator account address\",\"path\":\"creators.[].account\",\"signature\":\"304402200a32f52a36f61e3b62af734ceea6e02ebf44e9bbafccb92b2570b7ae9666638e02205e8a0ee1634919bab75369b611257e17c12cf379a4b83e3da2089de13863baa0\"},{\"label\":\"Creator value (10000 = 100%)\",\"path\":\"creators.[].value\",\"signature\":\"304502210092c988b7806250d99ca2760167a0c72f4c7e20f8f9174c519421bba8adc03c0a022032f33a3843e31b8ad17991e8eb3e3b922c5c2b9570d930fa9456b6f59b8974d3\"},{\"label\":\"Royalties account address\",\"path\":\"royalties.[].account\",\"signature\":\"304502210081e5ed5701d2bb497c4b1cadd0ca61220b1078357f7e3ace908c01fcfcd3abad02203b03cb75eeabcd49777362466e3af9a461ad39059238748ed7d902f988db3318\"},{\"label\":\"Royalties value (10000 = 100%)\",\"path\":\"royalties.[].value\",\"signature\":\"3045022100cc555652ef532386da9ad2405536aaa7adbe4cdac73ae9b2a8d4b0659eb4013a0220030799c1a813bef66c6395c7305a1f98e3bfc0bd045917d63bf7bd24e09fbebf\"}]},\"137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8\":{\"contractName\":{\"label\":\"Meta Transaction\",\"signature\":\"304402202e2b7810798bb8d8094ff46e47ae09c820b374420984f5c9845139f7995b5266022050244aa907e45d7ff4ffc0b383262c4425d32aee4190bfc09fff359163268b73\"},\"fields\":[{\"label\":\"User Address\",\"path\":\"from\",\"signature\":\"3045022100da2c6c45ce4014375aec27ce7dfc470a066a53a3ba812da7f4fac641fc48334502202ce049c05a76e19fc4195a323464383f3eca62f33a435ad5807716af1a83af4e\"},{\"label\":\"Meta Transaction Nonce\",\"path\":\"nonce\",\"signature\":\"304402207b53dc30da4e7360a2deb22ab0ee2ddca9dda1c807095a57751dc395d7d503c602200f464f277a17558cab3b891fe8d4fb232b5783f26f6813da77ceeba527bbe1c5\"}]}};\n","import axios from \"axios\";\nimport SHA224 from \"crypto-js/sha224\";\nimport { hexBuffer, intAsHexBytes } from \"../../utils\";\nimport {\n  EIP712Message,\n  EIP712MessageTypesEntry,\n  MessageFilters,\n} from \"./EIP712.types\";\nimport EIP712CAL from \"@ledgerhq/cryptoassets/data/eip712\";\nimport BigNumber from \"bignumber.js\";\n\nconst NULL_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\n/**\n * @ignore for the README\n *\n * A Map of helpers to get the wanted binary value for\n * each type of array possible in a type definition\n */\nenum EIP712_ARRAY_TYPE_VALUE {\n  DYNAMIC = 0,\n  FIXED = 1,\n}\n\n/**\n * @ignore for the README\n *\n * A Map of helpers to get the id and size to return for each\n * type that can be used in EIP712\n */\nexport const EIP712_TYPE_PROPERTIES: Record<\n  string,\n  {\n    key: (size?: number) => number;\n    sizeInBits: (size?: number) => number | null;\n  }\n> = {\n  CUSTOM: {\n    key: () => 0,\n    sizeInBits: () => null,\n  },\n  INT: {\n    key: () => 1,\n    sizeInBits: (size) => Number(size) / 8,\n  },\n  UINT: {\n    key: () => 2,\n    sizeInBits: (size) => Number(size) / 8,\n  },\n  ADDRESS: {\n    key: () => 3,\n    sizeInBits: () => null,\n  },\n  BOOL: {\n    key: () => 4,\n    sizeInBits: () => null,\n  },\n  STRING: {\n    key: () => 5,\n    sizeInBits: () => null,\n  },\n  BYTES: {\n    key: (size) => (typeof size !== \"undefined\" ? 6 : 7),\n    sizeInBits: (size) => (typeof size !== \"undefined\" ? Number(size) : null),\n  },\n};\n\n/**\n * @ignore for the README\n *\n * A Map of encoders to transform a value to formatted buffer\n */\nexport const EIP712_TYPE_ENCODERS = {\n  INT(value: string | null, sizeInBits = 256): Buffer {\n    const failSafeValue = value ?? \"0\";\n\n    if (typeof failSafeValue === \"string\" && failSafeValue?.startsWith(\"0x\")) {\n      return hexBuffer(failSafeValue);\n    }\n\n    let valueAsBN = new BigNumber(failSafeValue);\n    // If negative we'll use `two's complement` method to\n    // \"reversibly convert a positive binary number into a negative binary number with equivalent (but negative) value\".\n    // thx wikipedia\n    if (valueAsBN.lt(0)) {\n      const sizeInBytes = sizeInBits / 8;\n      // Creates BN from a buffer serving as a mask filled by maximum value 0xff\n      const maskAsBN = new BigNumber(\n        `0x${Buffer.alloc(sizeInBytes, 0xff).toString(\"hex\")}`\n      );\n\n      // two's complement version of value\n      valueAsBN = maskAsBN.plus(valueAsBN).plus(1);\n    }\n\n    const paddedHexString =\n      valueAsBN.toString(16).length % 2\n        ? \"0\" + valueAsBN.toString(16)\n        : valueAsBN.toString(16);\n\n    return Buffer.from(paddedHexString, \"hex\");\n  },\n\n  UINT(value: string): Buffer {\n    return this.INT(value);\n  },\n\n  BOOL(value: number | string | boolean | null): Buffer {\n    return this.INT(\n      typeof value === \"boolean\" ? Number(value).toString() : value\n    );\n  },\n\n  ADDRESS(value: string | null): Buffer {\n    // Only sending the first 10 bytes (why ?)\n    return hexBuffer(value ?? \"\").slice(0, 20);\n  },\n\n  STRING(value: string | null): Buffer {\n    return Buffer.from(value ?? \"\", \"utf-8\");\n  },\n\n  BYTES(value: string | null, sizeInBits?: number): Buffer {\n    const failSafeValue = value ?? \"\";\n    // Why slice again ?\n    return hexBuffer(failSafeValue).slice(\n      0,\n      sizeInBits ?? (failSafeValue?.length - 2) / 2\n    );\n  },\n};\n\n/**\n * @ignore for the README\n *\n * Helper parsing an EIP712 Type name to return its type and size(s)\n * if it's an array or nested arrays\n *\n * @see EIP712MessageTypes\n *\n * @example \"uint8[2][][4]\" => [{name: \"uint\", bits: 8}, [2, null, 4]]\n * @example \"bool\" => [{name: \"bool\", bits: null}, []]\n *\n * @param {String} typeName\n * @returns {[{ name: string; bits: Number | null }, Array<Number | null | undefined>]}\n */\nexport const destructTypeFromString = (\n  typeName?: string\n): [\n  { name: string; bits: number | undefined } | null,\n  Array<number | null>\n] => {\n  // Will split \"any[][1][10]\" in \"any\", \"[][1][10]\"\n  const splitNameAndArraysRegex = new RegExp(/^([^[\\]]*)(\\[.*\\])*/g);\n  // Will match all numbers (or null) inside each array. [0][10][] => [0,10,null]\n  const splitArraysRegex = new RegExp(/\\[(\\d*)\\]/g);\n  // Will separate the the name from the potential bits allocation. uint8 => [uint,8]\n  const splitNameAndNumberRegex = new RegExp(/(\\D*)(\\d*)/);\n\n  const [, type, maybeArrays] =\n    splitNameAndArraysRegex.exec(typeName || \"\") || [];\n  const [, name, bits] = splitNameAndNumberRegex.exec(type || \"\") || [];\n  const typeDescription = name\n    ? { name, bits: bits ? Number(bits) : undefined }\n    : null;\n\n  const arrays = maybeArrays ? [...maybeArrays.matchAll(splitArraysRegex)] : [];\n  // Parse each size to either a Number or null\n  const arraySizes = arrays.map(([, size]) => (size ? Number(size) : null));\n\n  return [typeDescription, arraySizes];\n};\n\n/**\n * @ignore for the README\n *\n * Helper to construct the hexadecimal ByteString for the description\n * of a field in an EIP712 Message\n *\n * @param isArray\n * @param typeSize\n * @param typeValue\n * @returns {String} HexByteString\n */\nexport const constructTypeDescByteString = (\n  isArray: boolean,\n  typeSize: number | null | undefined,\n  typeValue: number\n): string => {\n  if (typeValue >= 16) {\n    throw new Error(\n      \"Eth utils - constructTypeDescByteString - Cannot accept a typeValue >= 16 because the typeValue can only be 4 bits in binary\" +\n        { isArray, typeSize, typeValue }\n    );\n  }\n  // 1 is array, 0 is not array\n  const isArrayBit = isArray ? \"1\" : \"0\";\n  // 1 has type size, 0 has no type size\n  const hasTypeSize = typeof typeSize === \"number\" ? \"1\" : \"0\";\n  // 2 unused bits\n  const unusedBits = \"00\";\n  // type key as 4 bits\n  const typeValueBits = typeValue.toString(2).padStart(4, \"0\");\n\n  return intAsHexBytes(\n    parseInt(isArrayBit + hasTypeSize + unusedBits + typeValueBits, 2),\n    1\n  );\n};\n\n/**\n * @ignore for the README\n *\n * Helper to create the buffer to describe an EIP712 types' entry structure\n *\n * @param {EIP712MessageTypesEntry} entry\n * @returns {Buffer}\n */\nexport const makeTypeEntryStructBuffer = ({\n  name,\n  type,\n}: EIP712MessageTypesEntry): Buffer => {\n  const [typeDescription, arrSizes] = destructTypeFromString(type as string);\n  const isTypeAnArray = Boolean(arrSizes.length);\n  const typeProperties =\n    EIP712_TYPE_PROPERTIES[typeDescription?.name?.toUpperCase() || \"\"] ||\n    EIP712_TYPE_PROPERTIES.CUSTOM;\n\n  const typeKey = typeProperties.key(typeDescription?.bits);\n  const typeSizeInBits = typeProperties.sizeInBits(typeDescription?.bits);\n\n  const typeDescData = constructTypeDescByteString(\n    isTypeAnArray,\n    typeSizeInBits,\n    typeKey\n  );\n\n  const bufferArray: Buffer[] = [Buffer.from(typeDescData, \"hex\")];\n\n  if (typeProperties === EIP712_TYPE_PROPERTIES.CUSTOM) {\n    bufferArray.push(\n      Buffer.from(intAsHexBytes(typeDescription?.name?.length ?? 0, 1), \"hex\")\n    );\n    bufferArray.push(Buffer.from(typeDescription?.name ?? \"\", \"utf-8\"));\n  }\n\n  if (typeof typeSizeInBits === \"number\") {\n    bufferArray.push(Buffer.from(intAsHexBytes(typeSizeInBits, 1), \"hex\"));\n  }\n\n  if (isTypeAnArray) {\n    bufferArray.push(Buffer.from(intAsHexBytes(arrSizes.length, 1), \"hex\"));\n\n    arrSizes.forEach((size) => {\n      if (typeof size === \"number\") {\n        bufferArray.push(\n          Buffer.from(intAsHexBytes(EIP712_ARRAY_TYPE_VALUE.FIXED, 1), \"hex\"),\n          Buffer.from(intAsHexBytes(size, 1), \"hex\")\n        );\n      } else {\n        bufferArray.push(\n          Buffer.from(intAsHexBytes(EIP712_ARRAY_TYPE_VALUE.DYNAMIC, 1), \"hex\")\n        );\n      }\n    });\n  }\n\n  bufferArray.push(\n    Buffer.from(intAsHexBytes(name.length, 1), \"hex\"),\n    Buffer.from(name, \"utf-8\")\n  );\n\n  return Buffer.concat(bufferArray);\n};\n\n// As defined in [spec](https://eips.ethereum.org/EIPS/eip-712), the properties below are all required.\nexport function isEIP712Message(\n  message: Record<string, unknown> | string\n): message is EIP712Message {\n  return (\n    typeof message === \"object\" &&\n    \"types\" in message &&\n    \"primaryType\" in message &&\n    \"domain\" in message &&\n    \"message\" in message\n  );\n}\n\nexport const sortObjectAlphabetically = (\n  obj: Record<string, any>\n): Record<string, any> => {\n  const keys = Object.keys(obj).sort();\n\n  return keys.reduce((acc, curr) => {\n    const value = (() => {\n      if (Array.isArray(obj[curr])) {\n        return obj[curr].map((field) =>\n          sortObjectAlphabetically(field as Record<string, any>)\n        );\n      }\n      return obj[curr];\n    })();\n\n    acc[curr] = value;\n    return acc;\n  }, {});\n};\n\nexport const getSchemaHashForMessage = (message: EIP712Message): string => {\n  const { types } = message;\n  const sortedTypes = sortObjectAlphabetically(types);\n\n  return SHA224(JSON.stringify(sortedTypes).replace(\" \", \"\")).toString();\n};\n\n/**\n * @ignore for the README\n *\n * Tries to find the proper filters for a given EIP712 message\n * in the CAL\n *\n * @param {EIP712Message} message\n * @returns {MessageFilters | undefined}\n */\nexport const getFiltersForMessage = async (\n  message: EIP712Message,\n  remoteCryptoAssetsListURI?: string | null\n): Promise<MessageFilters | undefined> => {\n  const schemaHash = getSchemaHashForMessage(message);\n  const messageId = `${message.domain?.chainId ?? 0}:${\n    message.domain?.verifyingContract ?? NULL_ADDRESS\n  }:${schemaHash}`;\n\n  try {\n    if (remoteCryptoAssetsListURI) {\n      const { data: dynamicCAL } = await axios.get<\n        Record<string, MessageFilters>\n      >(`${remoteCryptoAssetsListURI}/eip712.json`);\n      return dynamicCAL[messageId] || EIP712CAL[messageId];\n    }\n    throw new Error();\n  } catch (e) {\n    return EIP712CAL[messageId];\n  }\n};\n","import Transport from \"@ledgerhq/hw-transport\";\nimport {\n  EIP712Message,\n  EIP712MessageTypes,\n  EIP712MessageTypesEntry,\n  FilteringInfoContractName,\n  FilteringInfoShowField,\n  MessageFilters,\n  StructDefData,\n  StructImplemData,\n} from \"./EIP712.types\";\nimport { hexBuffer, intAsHexBytes, splitPath } from \"../../utils\";\nimport { getLoadConfig } from \"../../services/ledger/loadConfig\";\nimport { LoadConfig } from \"../../services/types\";\nimport {\n  destructTypeFromString,\n  EIP712_TYPE_ENCODERS,\n  EIP712_TYPE_PROPERTIES,\n  getFiltersForMessage,\n  makeTypeEntryStructBuffer,\n  sortObjectAlphabetically,\n} from \"./EIP712.utils\";\n\n/**\n * @ignore for the README\n *\n * Factory to create the recursive function that will pass on each\n * field level and APDUs to describe its structure implementation\n *\n * @param {Eth[\"sendStructImplem\"]} sendStructImplem\n * @param {EIP712MessageTypes} types\n * @returns {void}\n */\nconst makeRecursiveFieldStructImplem = (\n  transport: Transport,\n  types: EIP712MessageTypes,\n  filters?: MessageFilters\n): ((\n  destructedType: ReturnType<typeof destructTypeFromString>,\n  data: unknown,\n  path?: string\n) => Promise<void>) => {\n  const typesMap = {} as Record<string, Record<string, string>>;\n  for (const type in types) {\n    typesMap[type] = types[type]?.reduce(\n      (acc, curr) => ({ ...acc, [curr.name]: curr.type }),\n      {}\n    );\n  }\n\n  // This recursion will call itself to handle each level of each field\n  // in order to send APDUs for each of them\n  const recursiveFieldStructImplem = async (\n    destructedType: ReturnType<typeof destructTypeFromString>,\n    data,\n    path = \"\"\n  ) => {\n    const [typeDescription, arrSizes] = destructedType;\n    const [currSize, ...restSizes] = arrSizes;\n    const isCustomType =\n      !EIP712_TYPE_PROPERTIES[typeDescription?.name?.toUpperCase() || \"\"];\n\n    if (Array.isArray(data) && typeof currSize !== \"undefined\") {\n      await sendStructImplem(transport, {\n        structType: \"array\",\n        value: data.length,\n      });\n      for (const entry of data) {\n        await recursiveFieldStructImplem(\n          [typeDescription, restSizes],\n          entry,\n          `${path}.[]`\n        );\n      }\n    } else if (isCustomType) {\n      for (const [fieldName, fieldValue] of Object.entries(\n        data as EIP712Message[\"message\"]\n      )) {\n        const fieldType = typesMap[typeDescription?.name || \"\"]?.[fieldName];\n\n        if (fieldType) {\n          await recursiveFieldStructImplem(\n            destructTypeFromString(fieldType),\n            fieldValue,\n            `${path}.${fieldName}`\n          );\n        }\n      }\n    } else {\n      const filter = filters?.fields.find((f) => path === f.path);\n\n      if (filter) {\n        await sendFilteringInfo(transport, \"showField\", {\n          displayName: filter.label,\n          sig: filter.signature,\n        });\n      }\n\n      await sendStructImplem(transport, {\n        structType: \"field\",\n        value: {\n          data,\n          type: typeDescription?.name || \"\",\n          sizeInBits: typeDescription?.bits,\n        },\n      });\n    }\n  };\n\n  return recursiveFieldStructImplem;\n};\n\n/**\n * @ignore for the README\n *\n * This method is used to send the message definition with all its types.\n * This method should be used before the sendStructImplem one\n *\n * @param {String} structType\n * @param {String|Buffer} value\n * @returns {Promise<void>}\n */\nconst sendStructDef = (\n  transport: Transport,\n  structDef: StructDefData\n): Promise<Buffer> => {\n  enum APDU_FIELDS {\n    CLA = 0xe0,\n    INS = 0x1a,\n    P1_complete = 0x00,\n    P1_partial = 0x01,\n    P2_name = 0x00,\n    P2_field = 0xff,\n  }\n\n  const { structType, value } = structDef;\n  const data =\n    structType === \"name\" && typeof value === \"string\"\n      ? Buffer.from(value, \"utf-8\")\n      : (value as Buffer);\n\n  return transport.send(\n    APDU_FIELDS.CLA,\n    APDU_FIELDS.INS,\n    APDU_FIELDS.P1_complete,\n    structType === \"name\" ? APDU_FIELDS.P2_name : APDU_FIELDS.P2_field,\n    data\n  );\n};\n\n/**\n * @ignore for the README\n *\n * This method provides a trusted new display name to use for the upcoming field.\n * This method should be used after the sendStructDef one.\n *\n * If the method describes an empty name (length of 0), the upcoming field will be taken\n * into account but won’t be shown on the device.\n *\n * The signature is computed on :\n * json key length || json key || display name length || display name\n *\n * signed by the following secp256k1 public key:\n * 0482bbf2f34f367b2e5bc21847b6566f21f0976b22d3388a9a5e446ac62d25cf725b62a2555b2dd464a4da0ab2f4d506820543af1d242470b1b1a969a27578f353\n *\n * @param {String} structType \"root\" | \"array\" | \"field\"\n * @param {string | number | StructFieldData} value\n * @returns {Promise<Buffer | void>}\n */\nconst sendStructImplem = async (\n  transport: Transport,\n  structImplem: StructImplemData\n): Promise<Buffer | void> => {\n  enum APDU_FIELDS {\n    CLA = 0xe0,\n    INS = 0x1c,\n    P1_complete = 0x00,\n    P1_partial = 0x01,\n    P2_root = 0x00,\n    P2_array = 0x0f,\n    P2_field = 0xff,\n  }\n\n  const { structType, value } = structImplem;\n\n  if (structType === \"root\") {\n    return transport.send(\n      APDU_FIELDS.CLA,\n      APDU_FIELDS.INS,\n      APDU_FIELDS.P1_complete,\n      APDU_FIELDS.P2_root,\n      Buffer.from(value, \"utf-8\")\n    );\n  }\n\n  if (structType === \"array\") {\n    return transport.send(\n      APDU_FIELDS.CLA,\n      APDU_FIELDS.INS,\n      APDU_FIELDS.P1_complete,\n      APDU_FIELDS.P2_array,\n      Buffer.from(intAsHexBytes(value, 1), \"hex\")\n    );\n  }\n\n  if (structType === \"field\") {\n    const { data: rawData, type, sizeInBits } = value;\n    const encodedData: Buffer | null = EIP712_TYPE_ENCODERS[\n      type.toUpperCase()\n    ]?.(rawData, sizeInBits);\n\n    if (encodedData) {\n      // const dataLengthPer16Bits = (encodedData.length & 0xff00) >> 8;\n      const dataLengthPer16Bits = Math.floor(encodedData.length / 256);\n      // const dataLengthModulo16Bits = encodedData.length & 0xff;\n      const dataLengthModulo16Bits = encodedData.length % 256;\n\n      const data = Buffer.concat([\n        Buffer.from(intAsHexBytes(dataLengthPer16Bits, 1), \"hex\"),\n        Buffer.from(intAsHexBytes(dataLengthModulo16Bits, 1), \"hex\"),\n        encodedData,\n      ]);\n\n      const bufferSlices = new Array(Math.ceil(data.length / 256))\n        .fill(null)\n        .map((_, i) => data.slice(i * 255, (i + 1) * 255));\n\n      for (const bufferSlice of bufferSlices) {\n        await transport.send(\n          APDU_FIELDS.CLA,\n          APDU_FIELDS.INS,\n          bufferSlice !== bufferSlices[bufferSlices.length - 1]\n            ? APDU_FIELDS.P1_partial\n            : APDU_FIELDS.P1_complete,\n          APDU_FIELDS.P2_field,\n          bufferSlice\n        );\n      }\n    }\n  }\n\n  return Promise.resolve();\n};\n\nasync function sendFilteringInfo(\n  transport: Transport,\n  type: \"activate\"\n): Promise<Buffer>;\nasync function sendFilteringInfo(\n  transport: Transport,\n  type: \"contractName\",\n  data: FilteringInfoContractName\n): Promise<Buffer>;\nasync function sendFilteringInfo(\n  transport: Transport,\n  type: \"showField\",\n  data: FilteringInfoShowField\n): Promise<Buffer>;\nasync function sendFilteringInfo(\n  transport: Transport,\n  type: \"activate\" | \"contractName\" | \"showField\",\n  data?: FilteringInfoContractName | FilteringInfoShowField\n): Promise<Buffer | void> {\n  enum APDU_FIELDS {\n    CLA = 0xe0,\n    INS = 0x1e,\n    P1 = 0x00,\n    P2_activate = 0x00,\n    P2_contract_name = 0x0f, // officially named \"message info\"\n    P2_show_field = 0xff,\n  }\n\n  switch (type) {\n    case \"activate\":\n      return transport.send(\n        APDU_FIELDS.CLA,\n        APDU_FIELDS.INS,\n        APDU_FIELDS.P1,\n        APDU_FIELDS.P2_activate\n      );\n\n    case \"contractName\": {\n      const { displayName, filtersCount, sig } =\n        data as FilteringInfoContractName;\n      const displayNameLengthBuffer = Buffer.from(\n        intAsHexBytes(displayName.length, 1),\n        \"hex\"\n      );\n      const displayNameBuffer = Buffer.from(displayName);\n      const filtersCountBuffer = Buffer.from(\n        intAsHexBytes(filtersCount, 1),\n        \"hex\"\n      );\n      const sigLengthBuffer = Buffer.from(\n        intAsHexBytes(sig.length / 2, 1),\n        \"hex\"\n      );\n      const sigBuffer = Buffer.from(sig, \"hex\");\n\n      const callData = Buffer.concat([\n        displayNameLengthBuffer,\n        displayNameBuffer,\n        filtersCountBuffer,\n        sigLengthBuffer,\n        sigBuffer,\n      ]);\n\n      return transport.send(\n        APDU_FIELDS.CLA,\n        APDU_FIELDS.INS,\n        APDU_FIELDS.P1,\n        APDU_FIELDS.P2_contract_name,\n        callData\n      );\n    }\n\n    case \"showField\": {\n      const { displayName, sig } = data as FilteringInfoShowField;\n      const displayNameLengthBuffer = Buffer.from(\n        intAsHexBytes(displayName.length, 1),\n        \"hex\"\n      );\n      const displayNameBuffer = Buffer.from(displayName);\n      const sigLengthBuffer = Buffer.from(\n        intAsHexBytes(sig.length / 2, 1),\n        \"hex\"\n      );\n      const sigBuffer = Buffer.from(sig, \"hex\");\n\n      const callData = Buffer.concat([\n        displayNameLengthBuffer,\n        displayNameBuffer,\n        sigLengthBuffer,\n        sigBuffer,\n      ]);\n\n      return transport.send(\n        APDU_FIELDS.CLA,\n        APDU_FIELDS.INS,\n        APDU_FIELDS.P1,\n        APDU_FIELDS.P2_show_field,\n        callData\n      );\n    }\n  }\n}\n\n/**\n * @ignore for the README\n *\n * Sign an EIP-721 formatted message following the specification here:\n * https://github.com/LedgerHQ/app-ethereum/blob/develop/doc/ethapp.asc#sign-eth-eip-712\n * @example\n  eth.signEIP721Message(\"44'/60'/0'/0/0\", {\n    domain: {\n      chainId: 69,\n      name: \"Da Domain\",\n      verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n      version: \"1\"\n    },\n    types: {\n      \"EIP712Domain\": [\n            { name: \"name\", type: \"string\" },\n            { name: \"version\", type: \"string\" },\n            { name: \"chainId\", type: \"uint256\" },\n            { name: \"verifyingContract\", type: \"address\" }\n        ],\n      \"Test\": [\n        { name: \"contents\", type: \"string\" }\n      ]\n    },\n    primaryType: \"Test\",\n    message: {contents: \"Hello, Bob!\"},\n  })\n *\n * @param {String} path derivationPath\n * @param {Object} jsonMessage message to sign\n * @param {Boolean} fullImplem use the legacy implementation\n * @returns {Promise}\n */\nexport const signEIP712Message = async (\n  transport: Transport,\n  path: string,\n  jsonMessage: EIP712Message,\n  fullImplem = false,\n  loadConfig: LoadConfig\n): Promise<{\n  v: number;\n  s: string;\n  r: string;\n}> => {\n  enum APDU_FIELDS {\n    CLA = 0xe0,\n    INS = 0x0c,\n    P1 = 0x00,\n    P2_v0 = 0x00,\n    P2_full = 0x01,\n  }\n  const { primaryType, types: unsortedTypes, domain, message } = jsonMessage;\n  const { cryptoassetsBaseURL } = getLoadConfig(loadConfig);\n  // Types are sorted by alphabetical order in order to get the same schema hash no matter the JSON format\n  const types = sortObjectAlphabetically(unsortedTypes) as EIP712MessageTypes;\n  const filters = await getFiltersForMessage(jsonMessage, cryptoassetsBaseURL);\n\n  const typeEntries = Object.entries(types) as [\n    keyof EIP712MessageTypes,\n    EIP712MessageTypesEntry[]\n  ][];\n  // Looping on all types entries and fields to send structures' definitions\n  for (const [typeName, entries] of typeEntries) {\n    await sendStructDef(transport, {\n      structType: \"name\",\n      value: typeName as string,\n    });\n\n    for (const { name, type } of entries) {\n      const typeEntryBuffer = makeTypeEntryStructBuffer({ name, type });\n      await sendStructDef(transport, {\n        structType: \"field\",\n        value: typeEntryBuffer,\n      });\n    }\n  }\n\n  if (filters) {\n    await sendFilteringInfo(transport, \"activate\");\n  }\n  // Create the recursion that should pass on each entry\n  // of the domain fields and primaryType fields\n  const recursiveFieldStructImplem = makeRecursiveFieldStructImplem(\n    transport,\n    types,\n    filters\n  );\n\n  // Looping on all domain type's entries and fields to send\n  // structures' implementations\n  const domainName = \"EIP712Domain\";\n  await sendStructImplem(transport, {\n    structType: \"root\",\n    value: domainName,\n  });\n  const domainTypeFields = types[domainName];\n  for (const { name, type } of domainTypeFields) {\n    const domainFieldValue = domain[name];\n    await recursiveFieldStructImplem(\n      destructTypeFromString(type as string),\n      domainFieldValue\n    );\n  }\n\n  if (filters) {\n    const { contractName, fields } = filters;\n    const contractNameInfos = {\n      displayName: contractName.label,\n      filtersCount: fields.length,\n      sig: contractName.signature,\n    };\n    await sendFilteringInfo(transport, \"contractName\", contractNameInfos);\n  }\n\n  // Looping on all primaryType type's entries and fields to send\n  // structures' implementations\n  await sendStructImplem(transport, {\n    structType: \"root\",\n    value: primaryType,\n  });\n  const primaryTypeFields = types[primaryType];\n  for (const { name, type } of primaryTypeFields) {\n    const primaryTypeValue = message[name];\n    await recursiveFieldStructImplem(\n      destructTypeFromString(type as string),\n      primaryTypeValue,\n      name\n    );\n  }\n\n  // Sending the final signature.\n  const paths = splitPath(path);\n  const signatureBuffer = Buffer.alloc(1 + paths.length * 4);\n  signatureBuffer[0] = paths.length;\n  paths.forEach((element, index) => {\n    signatureBuffer.writeUInt32BE(element, 1 + 4 * index);\n  });\n\n  return transport\n    .send(\n      APDU_FIELDS.CLA,\n      APDU_FIELDS.INS,\n      APDU_FIELDS.P1,\n      fullImplem ? APDU_FIELDS.P2_v0 : APDU_FIELDS.P2_full,\n      signatureBuffer\n    )\n    .then((response) => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n\n      return {\n        v,\n        r,\n        s,\n      };\n    });\n};\n\n/**\n * @ignore for the README\n * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)\n * @example\n eth.signEIP712HashedMessage(\"44'/60'/0'/0/0\", Buffer.from(\"0101010101010101010101010101010101010101010101010101010101010101\").toString(\"hex\"), Buffer.from(\"0202020202020202020202020202020202020202020202020202020202020202\").toString(\"hex\")).then(result => {\n var v = result['v'] - 27;\n v = v.toString(16);\n if (v.length < 2) {\n   v = \"0\" + v;\n }\n console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n })\n */\nexport const signEIP712HashedMessage = (\n  transport: Transport,\n  path: string,\n  domainSeparatorHex: string,\n  hashStructMessageHex: string\n): Promise<{\n  v: number;\n  s: string;\n  r: string;\n}> => {\n  const domainSeparator = hexBuffer(domainSeparatorHex);\n  const hashStruct = hexBuffer(hashStructMessageHex);\n  const paths = splitPath(path);\n  const buffer = Buffer.alloc(1 + paths.length * 4 + 32 + 32, 0);\n  let offset = 0;\n  buffer[0] = paths.length;\n  paths.forEach((element, index) => {\n    buffer.writeUInt32BE(element, 1 + 4 * index);\n  });\n  offset = 1 + 4 * paths.length;\n  domainSeparator.copy(buffer, offset);\n  offset += 32;\n  hashStruct.copy(buffer, offset);\n\n  return transport.send(0xe0, 0x0c, 0x00, 0x00, buffer).then((response) => {\n    const v = response[0];\n    const r = response.slice(1, 1 + 32).toString(\"hex\");\n    const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n    return {\n      v,\n      r,\n      s,\n    };\n  });\n};\n\nexport type { EIP712Message } from \"./EIP712.types\";\nexport { isEIP712Message, getFiltersForMessage } from \"./EIP712.utils\";\n","/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// FIXME drop:\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport { BigNumber } from \"bignumber.js\";\nimport { decodeTxInfo, hexBuffer, maybeHexBuffer, splitPath } from \"./utils\";\n// NB: these are temporary import for the deprecated fallback mechanism\nimport {\n  LedgerEthTransactionResolution,\n  LoadConfig,\n  ResolutionConfig,\n} from \"./services/types\";\nimport ledgerService from \"./services/ledger\";\nimport {\n  EthAppNftNotSupported,\n  EthAppPleaseEnableContractData,\n} from \"./errors\";\nimport {\n  signEIP712HashedMessage,\n  signEIP712Message,\n  EIP712Message,\n  isEIP712Message,\n  getFiltersForMessage,\n} from \"./modules/EIP712\";\n\nexport { ledgerService, isEIP712Message, getFiltersForMessage };\n\nexport type StarkQuantizationType =\n  | \"eth\"\n  | \"erc20\"\n  | \"erc721\"\n  | \"erc20mintable\"\n  | \"erc721mintable\";\nconst starkQuantizationTypeMap = {\n  eth: 1,\n  erc20: 2,\n  erc721: 3,\n  erc20mintable: 4,\n  erc721mintable: 5,\n};\n\nconst remapTransactionRelatedErrors = (e) => {\n  if (e && e.statusCode === 0x6a80) {\n    return new EthAppPleaseEnableContractData(\n      \"Please enable Blind signing or Contract data in the Ethereum app Settings\"\n    );\n  }\n\n  return e;\n};\n\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\n\nexport default class Eth {\n  transport: Transport;\n  loadConfig: LoadConfig;\n\n  setLoadConfig(loadConfig: LoadConfig): void {\n    this.loadConfig = loadConfig;\n  }\n\n  constructor(\n    transport: Transport,\n    scrambleKey = \"w0w\",\n    loadConfig: LoadConfig = {}\n  ) {\n    this.transport = transport;\n    this.loadConfig = loadConfig;\n    transport.decorateAppAPIMethods(\n      this,\n      [\n        \"getAddress\",\n        \"provideERC20TokenInformation\",\n        \"signTransaction\",\n        \"signPersonalMessage\",\n        \"getAppConfiguration\",\n        \"signEIP712Message\",\n        \"signEIP712HashedMessage\",\n        \"starkGetPublicKey\",\n        \"starkSignOrder\",\n        \"starkSignOrder_v2\",\n        \"starkSignTransfer\",\n        \"starkSignTransfer_v2\",\n        \"starkProvideQuantum\",\n        \"starkProvideQuantum_v2\",\n        \"starkUnsafeSign\",\n        \"eth2GetPublicKey\",\n        \"eth2SetWithdrawalIndex\",\n        \"setExternalPlugin\",\n        \"setPlugin\",\n        \"getEIP1024PublicEncryptionKey\",\n        \"getEIP1024SharedSecret\",\n      ],\n      scrambleKey\n    );\n  }\n\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n  getAddress(\n    path: string,\n    boolDisplay?: boolean,\n    boolChaincode?: boolean\n  ): Promise<{\n    publicKey: string;\n    address: string;\n    chainCode?: string;\n  }> {\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(\n        0xe0,\n        0x02,\n        boolDisplay ? 0x01 : 0x00,\n        boolChaincode ? 0x01 : 0x00,\n        buffer\n      )\n      .then((response) => {\n        const publicKeyLength = response[0];\n        const addressLength = response[1 + publicKeyLength];\n\n        return {\n          publicKey: response.slice(1, 1 + publicKeyLength).toString(\"hex\"),\n          address:\n            \"0x\" +\n            response\n              .slice(\n                1 + publicKeyLength + 1,\n                1 + publicKeyLength + 1 + addressLength\n              )\n              .toString(\"ascii\"),\n          chainCode: boolChaincode\n            ? response\n                .slice(\n                  1 + publicKeyLength + 1 + addressLength,\n                  1 + publicKeyLength + 1 + addressLength + 32\n                )\n                .toString(\"hex\")\n            : undefined,\n        };\n      });\n  }\n\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign.\n   *\n   * @param path: the BIP32 path to sign the transaction on\n   * @param rawTxHex: the raw ethereum transaction in hexadecimal to sign\n   * @param resolution: resolution is an object with all \"resolved\" metadata necessary to allow the device to clear sign information. This includes: ERC20 token information, plugins, contracts, NFT signatures,... You must explicitly provide something to avoid having a warning. By default, you can use Ledger's service or your own resolution service. See services/types.js for the contract. Setting the value to \"null\" will fallback everything to blind signing but will still allow the device to sign the transaction.\n   * @example\n   import { ledgerService } from \"@ledgerhq/hw-app-eth\"\n   const tx = \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\"; // raw tx to sign\n   const resolution = await ledgerService.resolveTransaction(tx);\n   const result = eth.signTransaction(\"44'/60'/0'/0/0\", tx, resolution);\n   console.log(result);\n   */\n  async signTransaction(\n    path: string,\n    rawTxHex: string,\n    resolution?: LedgerEthTransactionResolution | null\n  ): Promise<{\n    s: string;\n    v: string;\n    r: string;\n  }> {\n    if (resolution === undefined) {\n      console.warn(\n        \"hw-app-eth: signTransaction(path, rawTxHex, resolution): \" +\n          \"please provide the 'resolution' parameter. \" +\n          \"See https://github.com/LedgerHQ/ledgerjs/blob/master/packages/hw-app-eth/README.md \" +\n          \"– the previous signature is deprecated and providing the 3rd 'resolution' parameter explicitly will become mandatory so you have the control on the resolution and the fallback mecanism (e.g. fallback to blind signing or not).\" +\n          \"// Possible solution:\\n\" +\n          \" + import { ledgerService } from '@ledgerhq/hw-app-eth';\\n\" +\n          \" + const resolution = await ledgerService.resolveTransaction(rawTxHex);\"\n      );\n      resolution = await ledgerService\n        .resolveTransaction(rawTxHex, this.loadConfig, {\n          externalPlugins: true,\n          erc20: true,\n        })\n        .catch((e) => {\n          console.warn(\n            \"an error occurred in resolveTransaction => fallback to blind signing: \" +\n              String(e)\n          );\n          return null;\n        });\n    }\n\n    // provide to the device resolved information to make it clear sign the signature\n    if (resolution) {\n      for (const plugin of resolution.plugin) {\n        await setPlugin(this.transport, plugin);\n      }\n      for (const { payload, signature } of resolution.externalPlugin) {\n        await setExternalPlugin(this.transport, payload, signature);\n      }\n      for (const nft of resolution.nfts) {\n        await provideNFTInformation(this.transport, Buffer.from(nft, \"hex\"));\n      }\n      for (const data of resolution.erc20Tokens) {\n        await provideERC20TokenInformation(\n          this.transport,\n          Buffer.from(data, \"hex\")\n        );\n      }\n    }\n\n    const rawTx = Buffer.from(rawTxHex, \"hex\");\n    const { vrsOffset, txType, chainId, chainIdTruncated } =\n      decodeTxInfo(rawTx);\n\n    const paths = splitPath(path);\n    let response;\n    let offset = 0;\n    while (offset !== rawTx.length) {\n      const first = offset === 0;\n      const maxChunkSize = first ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > rawTx.length\n          ? rawTx.length - offset\n          : maxChunkSize;\n\n      if (vrsOffset != 0 && offset + chunkSize >= vrsOffset) {\n        // Make sure that the chunk doesn't end right on the EIP 155 marker if set\n        chunkSize = rawTx.length - offset;\n      }\n\n      const buffer = Buffer.alloc(\n        first ? 1 + paths.length * 4 + chunkSize : chunkSize\n      );\n\n      if (first) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      response = await this.transport\n        .send(0xe0, 0x04, first ? 0x00 : 0x80, 0x00, buffer)\n        .catch((e) => {\n          throw remapTransactionRelatedErrors(e);\n        });\n\n      offset += chunkSize;\n    }\n\n    const response_byte: number = response[0];\n    let v = \"\";\n\n    if (chainId.times(2).plus(35).plus(1).isGreaterThan(255)) {\n      const oneByteChainId = (chainIdTruncated * 2 + 35) % 256;\n\n      const ecc_parity = Math.abs(response_byte - oneByteChainId);\n\n      if (txType != null) {\n        // For EIP2930 and EIP1559 tx, v is simply the parity.\n        v = ecc_parity % 2 == 1 ? \"00\" : \"01\";\n      } else {\n        // Legacy type transaction with a big chain ID\n        v = chainId.times(2).plus(35).plus(ecc_parity).toString(16);\n      }\n    } else {\n      v = response_byte.toString(16);\n    }\n\n    // Make sure v has is prefixed with a 0 if its length is odd (\"1\" -> \"01\").\n    if (v.length % 2 == 1) {\n      v = \"0\" + v;\n    }\n\n    const r = response.slice(1, 1 + 32).toString(\"hex\");\n    const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n    return { v, r, s };\n  }\n\n  /**\n   * Helper to get resolution and signature of a transaction in a single method\n   * \n   * @param path: the BIP32 path to sign the transaction on\n   * @param rawTxHex: the raw ethereum transaction in hexadecimal to sign\n   * @param resolutionConfig: configuration about what should be clear signed in the transaction\n   * @param throwOnError: optional parameter to determine if a failing resolution of the transaction should throw an error or not\n   * @example\n   const tx = \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\"; // raw tx to sign\n   const result = eth.clearSignTransaction(\"44'/60'/0'/0/0\", tx, { erc20: true, externalPlugins: true, nft: true});\n   console.log(result);\n   */\n  async clearSignTransaction(\n    path: string,\n    rawTxHex: string,\n    resolutionConfig: ResolutionConfig,\n    throwOnError = false\n  ): Promise<{ r: string; s: string; v: string }> {\n    const resolution = await ledgerService\n      .resolveTransaction(rawTxHex, this.loadConfig, resolutionConfig)\n      .catch((e) => {\n        console.warn(\n          \"an error occurred in resolveTransaction => fallback to blind signing: \" +\n            String(e)\n        );\n\n        if (throwOnError) {\n          throw e;\n        }\n        return null;\n      });\n\n    return this.signTransaction(path, rawTxHex, resolution);\n  }\n\n  /**\n   */\n  getAppConfiguration(): Promise<{\n    arbitraryDataEnabled: number;\n    erc20ProvisioningNecessary: number;\n    starkEnabled: number;\n    starkv2Supported: number;\n    version: string;\n  }> {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then((response) => {\n      return {\n        arbitraryDataEnabled: response[0] & 0x01,\n        erc20ProvisioningNecessary: response[0] & 0x02,\n        starkEnabled: response[0] & 0x04,\n        starkv2Supported: response[0] & 0x08,\n        version: \"\" + response[1] + \".\" + response[2] + \".\" + response[3],\n      };\n    });\n  }\n\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\n  eth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n  async signPersonalMessage(\n    path: string,\n    messageHex: string\n  ): Promise<{\n    v: number;\n    s: string;\n    r: string;\n  }> {\n    const paths = splitPath(path);\n    let offset = 0;\n    const message = Buffer.from(messageHex, \"hex\");\n    let response;\n\n    while (offset !== message.length) {\n      const maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      const chunkSize =\n        offset + maxChunkSize > message.length\n          ? message.length - offset\n          : maxChunkSize;\n      const buffer = Buffer.alloc(\n        offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize\n      );\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(\n          buffer,\n          1 + 4 * paths.length + 4,\n          offset,\n          offset + chunkSize\n        );\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      response = await this.transport.send(\n        0xe0,\n        0x08,\n        offset === 0 ? 0x00 : 0x80,\n        0x00,\n        buffer\n      );\n\n      offset += chunkSize;\n    }\n\n    const v = response[0];\n    const r = response.slice(1, 1 + 32).toString(\"hex\");\n    const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n    return { v, r, s };\n  }\n\n  /**\n  * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)\n  * @example\n  eth.signEIP712HashedMessage(\"44'/60'/0'/0/0\", Buffer.from(\"0101010101010101010101010101010101010101010101010101010101010101\").toString(\"hex\"), Buffer.from(\"0202020202020202020202020202020202020202020202020202020202020202\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n  signEIP712HashedMessage(\n    path: string,\n    domainSeparatorHex: string,\n    hashStructMessageHex: string\n  ): Promise<{\n    v: number;\n    s: string;\n    r: string;\n  }> {\n    return signEIP712HashedMessage(\n      this.transport,\n      path,\n      domainSeparatorHex,\n      hashStructMessageHex\n    );\n  }\n\n  /**\n   * Sign an EIP-721 formatted message following the specification here:\n   * https://github.com/LedgerHQ/app-ethereum/blob/develop/doc/ethapp.asc#sign-eth-eip-712\n   * ⚠️ This method is not compatible with nano S (LNS). Make sure to use a try/catch to fallback on the signEIP712HashedMessage method ⚠️ \n   @example\n   eth.signEIP721Message(\"44'/60'/0'/0/0\", {\n      domain: {\n        chainId: 69,\n        name: \"Da Domain\",\n        verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n        version: \"1\"\n      },\n      types: {\n        \"EIP712Domain\": [\n              { name: \"name\", type: \"string\" },\n              { name: \"version\", type: \"string\" },\n              { name: \"chainId\", type: \"uint256\" },\n              { name: \"verifyingContract\", type: \"address\" }\n          ],\n        \"Test\": [\n          { name: \"contents\", type: \"string\" }\n        ]\n      },\n      primaryType: \"Test\",\n      message: {contents: \"Hello, Bob!\"},\n    })\n   *\n   * @param {String} path derivationPath\n   * @param {Object} jsonMessage message to sign\n   * @param {Boolean} fullImplem use the legacy implementation\n   * @returns {Promise}\n   */\n  async signEIP712Message(\n    path: string,\n    jsonMessage: EIP712Message,\n    fullImplem = false\n  ): Promise<{\n    v: number;\n    s: string;\n    r: string;\n  }> {\n    return signEIP712Message(\n      this.transport,\n      path,\n      jsonMessage,\n      fullImplem,\n      this.loadConfig\n    );\n  }\n\n  /**\n   * get Stark public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return the Stark public key\n   */\n  starkGetPublicKey(path: string, boolDisplay?: boolean): Promise<Buffer> {\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(0xf0, 0x02, boolDisplay ? 0x01 : 0x00, 0x00, buffer)\n      .then((response) => {\n        return response.slice(0, response.length - 2);\n      });\n  }\n\n  /**\n   * sign a Stark order\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantization quantization used for the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantization quantization used for the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n  starkSignOrder(\n    path: string,\n    sourceTokenAddress: string | undefined,\n    sourceQuantization: BigNumber,\n    destinationTokenAddress: string | undefined,\n    destinationQuantization: BigNumber,\n    sourceVault: number,\n    destinationVault: number,\n    amountSell: BigNumber,\n    amountBuy: BigNumber,\n    nonce: number,\n    timestamp: number\n  ): Promise<Buffer | { r: string; s: string }> {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(\n      1 + paths.length * 4 + 20 + 32 + 20 + 32 + 4 + 4 + 8 + 8 + 4 + 4,\n      0\n    );\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 32;\n\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(\n      destinationQuantization.toString(16).padStart(64, \"0\"),\n      \"hex\"\n    ).copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport\n      .send(0xf0, 0x04, 0x01, 0x00, buffer)\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return {\n          r,\n          s,\n        };\n      });\n  }\n\n  /**\n   * sign a Stark order using the Starkex V2 protocol\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantizationType quantization type used for the source token\n   * @option sourceQuantization quantization used for the source token (not present for erc 721 or mintable erc 721)\n   * @option sourceMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantizationType quantization type used for the destination token\n   * @option destinationQuantization quantization used for the destination token (not present for erc 721 or mintable erc 721)\n   * @option destinationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n  starkSignOrder_v2(\n    path: string,\n    sourceTokenAddress: string | undefined,\n    sourceQuantizationType: StarkQuantizationType,\n    sourceQuantization: BigNumber | undefined,\n    sourceMintableBlobOrTokenId: BigNumber | undefined,\n    destinationTokenAddress: string | undefined,\n    destinationQuantizationType: StarkQuantizationType,\n    destinationQuantization: BigNumber | undefined,\n    destinationMintableBlobOrTokenId: BigNumber | undefined,\n    sourceVault: number,\n    destinationVault: number,\n    amountSell: BigNumber,\n    amountBuy: BigNumber,\n    nonce: number,\n    timestamp: number\n  ): Promise<Buffer | { r: string; s: string }> {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n\n    if (!(sourceQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\n        \"eth.starkSignOrderv2 invalid source quantization type=\" +\n          sourceQuantizationType\n      );\n    }\n\n    if (!(destinationQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\n        \"eth.starkSignOrderv2 invalid destination quantization type=\" +\n          destinationQuantizationType\n      );\n    }\n\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(\n      1 +\n        paths.length * 4 +\n        1 +\n        20 +\n        32 +\n        32 +\n        1 +\n        20 +\n        32 +\n        32 +\n        4 +\n        4 +\n        8 +\n        8 +\n        4 +\n        4,\n      0\n    );\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    buffer[offset] = starkQuantizationTypeMap[sourceQuantizationType];\n    offset++;\n\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (sourceQuantization) {\n      Buffer.from(\n        sourceQuantization.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (sourceMintableBlobOrTokenId) {\n      Buffer.from(\n        sourceMintableBlobOrTokenId.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    offset += 32;\n    buffer[offset] = starkQuantizationTypeMap[destinationQuantizationType];\n    offset++;\n\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (destinationQuantization) {\n      Buffer.from(\n        destinationQuantization.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (destinationMintableBlobOrTokenId) {\n      Buffer.from(\n        destinationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport\n      .send(0xf0, 0x04, 0x03, 0x00, buffer)\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return {\n          r,\n          s,\n        };\n      });\n  }\n\n  /**\n   * sign a Stark transfer\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantization quantization used for the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n  starkSignTransfer(\n    path: string,\n    transferTokenAddress: string | undefined,\n    transferQuantization: BigNumber,\n    targetPublicKey: string,\n    sourceVault: number,\n    destinationVault: number,\n    amountTransfer: BigNumber,\n    nonce: number,\n    timestamp: number\n  ): Promise<Buffer | { r: string; s: string }> {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(\n      1 + paths.length * 4 + 20 + 32 + 32 + 4 + 4 + 8 + 4 + 4,\n      0\n    );\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(\n      transferQuantization.toString(16).padStart(64, \"0\"),\n      \"hex\"\n    ).copy(buffer, offset);\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport\n      .send(0xf0, 0x04, 0x02, 0x00, buffer)\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return {\n          r,\n          s,\n        };\n      });\n  }\n\n  /**\n   * sign a Stark transfer or conditional transfer using the Starkex V2 protocol\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantizationType quantization type used for the token to be transferred\n   * @option transferQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n   * @option transferMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @option conditionalTransferAddress onchain address of the condition for a conditional transfer\n   * @option conditionalTransferFact fact associated to the condition for a conditional transfer\n   * @return the signature\n   */\n  starkSignTransfer_v2(\n    path: string,\n    transferTokenAddress: string | undefined,\n    transferQuantizationType: StarkQuantizationType,\n    transferQuantization: BigNumber | undefined,\n    transferMintableBlobOrTokenId: BigNumber | undefined,\n    targetPublicKey: string,\n    sourceVault: number,\n    destinationVault: number,\n    amountTransfer: BigNumber,\n    nonce: number,\n    timestamp: number,\n    conditionalTransferAddress?: string,\n    conditionalTransferFact?: BigNumber\n  ): Promise<Buffer | { r: string; s: string }> {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    const conditionalTransferAddressHex = maybeHexBuffer(\n      conditionalTransferAddress\n    );\n\n    if (!(transferQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\n        \"eth.starkSignTransferv2 invalid quantization type=\" +\n          transferQuantizationType\n      );\n    }\n\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(\n      1 +\n        paths.length * 4 +\n        1 +\n        20 +\n        32 +\n        32 +\n        32 +\n        4 +\n        4 +\n        8 +\n        4 +\n        4 +\n        (conditionalTransferAddressHex ? 32 + 20 : 0),\n      0\n    );\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    buffer[offset] = starkQuantizationTypeMap[transferQuantizationType];\n    offset++;\n\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (transferQuantization) {\n      Buffer.from(\n        transferQuantization.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (transferMintableBlobOrTokenId) {\n      Buffer.from(\n        transferMintableBlobOrTokenId.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n\n    if (conditionalTransferAddressHex && conditionalTransferFact) {\n      offset += 4;\n      Buffer.from(\n        conditionalTransferFact.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n      offset += 32;\n      conditionalTransferAddressHex.copy(buffer, offset);\n    }\n\n    return this.transport\n      .send(\n        0xf0,\n        0x04,\n        conditionalTransferAddressHex ? 0x05 : 0x04,\n        0x00,\n        buffer\n      )\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return {\n          r,\n          s,\n        };\n      });\n  }\n\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantization quantization used for the token to be transferred\n   */\n  starkProvideQuantum(\n    operationContract: string | undefined,\n    operationQuantization: BigNumber\n  ): Promise<boolean> {\n    const operationContractHex = maybeHexBuffer(operationContract);\n    const buffer = Buffer.alloc(20 + 32, 0);\n\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, 0);\n    }\n\n    Buffer.from(\n      operationQuantization.toString(16).padStart(64, \"0\"),\n      \"hex\"\n    ).copy(buffer, 20);\n    return this.transport.send(0xf0, 0x08, 0x00, 0x00, buffer).then(\n      () => true,\n      (e) => {\n        if (e && e.statusCode === 0x6d00) {\n          // this case happen for ETH application versions not supporting Stark extensions\n          return false;\n        }\n\n        throw e;\n      }\n    );\n  }\n\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call using the Starkex V2 protocol\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantizationType quantization type of the token to be transferred\n   * @option operationQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n   * @option operationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) of the token to be transferred\n   */\n  starkProvideQuantum_v2(\n    operationContract: string | undefined,\n    operationQuantizationType: StarkQuantizationType,\n    operationQuantization?: BigNumber,\n    operationMintableBlobOrTokenId?: BigNumber\n  ): Promise<boolean> {\n    const operationContractHex = maybeHexBuffer(operationContract);\n\n    if (!(operationQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\n        \"eth.starkProvideQuantumV2 invalid quantization type=\" +\n          operationQuantizationType\n      );\n    }\n\n    const buffer = Buffer.alloc(20 + 32 + 32, 0);\n    let offset = 0;\n\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (operationQuantization) {\n      Buffer.from(\n        operationQuantization.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (operationMintableBlobOrTokenId) {\n      Buffer.from(\n        operationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    return this.transport\n      .send(\n        0xf0,\n        0x08,\n        starkQuantizationTypeMap[operationQuantizationType],\n        0x00,\n        buffer\n      )\n      .then(\n        () => true,\n        (e) => {\n          if (e && e.statusCode === 0x6d00) {\n            // this case happen for ETH application versions not supporting Stark extensions\n            return false;\n          }\n\n          throw e;\n        }\n      );\n  }\n\n  /**\n   * sign the given hash over the Stark curve\n   * It is intended for speed of execution in case an unknown Stark model is pushed and should be avoided as much as possible.\n   * @param path a path in BIP 32 format\n   * @param hash hexadecimal hash to sign\n   * @return the signature\n   */\n  starkUnsafeSign(\n    path: string,\n    hash: string\n  ): Promise<Buffer | { r: string; s: string }> {\n    const hashHex = hexBuffer(hash);\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(1 + paths.length * 4 + 32);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    hashHex.copy(buffer, offset);\n    return this.transport\n      .send(0xf0, 0x0a, 0x00, 0x00, buffer)\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return {\n          r,\n          s,\n        };\n      });\n  }\n\n  /**\n   * get an Ethereum 2 BLS-12 381 public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with a publicKey\n   * @example\n   * eth.eth2GetPublicKey(\"12381/3600/0/0\").then(o => o.publicKey)\n   */\n  eth2GetPublicKey(\n    path: string,\n    boolDisplay?: boolean\n  ): Promise<{\n    publicKey: string;\n  }> {\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(0xe0, 0x0e, boolDisplay ? 0x01 : 0x00, 0x00, buffer)\n      .then((response) => {\n        return {\n          publicKey: response.slice(0, -2).toString(\"hex\"),\n        };\n      });\n  }\n\n  /**\n   * Set the index of a Withdrawal key used as withdrawal credentials in an ETH 2 deposit contract call signature\n   *\n   * It shall be run before the ETH 2 deposit transaction is signed. If not called, the index is set to 0\n   *\n   * @param withdrawalIndex index path in the EIP 2334 path m/12381/3600/withdrawalIndex/0\n   * @return True if the method was executed successfully\n   */\n  eth2SetWithdrawalIndex(withdrawalIndex: number): Promise<boolean> {\n    const buffer = Buffer.alloc(4, 0);\n    buffer.writeUInt32BE(withdrawalIndex, 0);\n    return this.transport.send(0xe0, 0x10, 0x00, 0x00, buffer).then(\n      () => true,\n      (e) => {\n        if (e && e.statusCode === 0x6d00) {\n          // this case happen for ETH application versions not supporting ETH 2\n          return false;\n        }\n\n        throw e;\n      }\n    );\n  }\n\n  /**\n   * get a public encryption key on Curve25519 according to EIP 1024\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with a publicKey\n   * @example\n   * eth.getEIP1024PublicEncryptionKey(\"44'/60'/0'/0/0\").then(o => o.publicKey)\n   */\n  getEIP1024PublicEncryptionKey(\n    path: string,\n    boolDisplay?: boolean\n  ): Promise<{\n    publicKey: string;\n  }> {\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(0xe0, 0x18, boolDisplay ? 0x01 : 0x00, 0x00, buffer)\n      .then((response) => {\n        return {\n          publicKey: response.slice(0, -2).toString(\"hex\"),\n        };\n      });\n  }\n\n  /**\n   * get a shared secret on Curve25519 according to EIP 1024\n   * @param path a path in BIP 32 format\n   * @param remotePublicKeyHex remote Curve25519 public key\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with a shared secret\n   * @example\n   * eth.getEIP1024SharedSecret(\"44'/60'/0'/0/0\", \"87020e80af6e07a6e4697f091eacadb9e7e6629cb7e5a8a371689a3ed53b3d64\").then(o => o.sharedSecret)\n   */\n  getEIP1024SharedSecret(\n    path: string,\n    remotePublicKeyHex: string,\n    boolDisplay?: boolean\n  ): Promise<{\n    sharedSecret: string;\n  }> {\n    const paths = splitPath(path);\n    const remotePublicKey = hexBuffer(remotePublicKeyHex);\n    const buffer = Buffer.alloc(1 + paths.length * 4 + 32);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    remotePublicKey.copy(buffer, offset);\n    return this.transport\n      .send(0xe0, 0x18, boolDisplay ? 0x01 : 0x00, 0x01, buffer)\n      .then((response) => {\n        return {\n          sharedSecret: response.slice(0, -2).toString(\"hex\"),\n        };\n      });\n  }\n\n  provideERC20TokenInformation({ data }: { data: Buffer }): Promise<boolean> {\n    return provideERC20TokenInformation(this.transport, data);\n  }\n\n  setExternalPlugin(\n    pluginName: string,\n    contractAddress: string,\n    selector: string\n  ): Promise<boolean> {\n    console.warn(\n      \"hw-app-eth: eth.setExternalPlugin is deprecated. signTransaction solves this for you when providing it in `resolution`.\"\n    );\n    return setExternalPlugin(this.transport, pluginName, selector);\n  }\n\n  setPlugin(data: string): Promise<boolean> {\n    console.warn(\n      \"hw-app-eth: eth.setPlugin is deprecated. signTransaction solves this for you when providing it in `resolution`.\"\n    );\n    return setPlugin(this.transport, data);\n  }\n}\n\n// internal helpers\n\nfunction provideERC20TokenInformation(\n  transport: Transport,\n  data: Buffer\n): Promise<boolean> {\n  return transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(\n    () => true,\n    (e) => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n        // we return a flag to know if the call was effective or not\n        return false;\n      }\n      throw e;\n    }\n  );\n}\n\nfunction provideNFTInformation(\n  transport: Transport,\n  data: Buffer\n): Promise<boolean> {\n  return transport.send(0xe0, 0x14, 0x00, 0x00, data).then(\n    () => true,\n    (e) => {\n      if (e && e.statusCode === 0x6d00) {\n        // older version of ETH app => error because we don't allow blind sign when NFT is explicitly requested to be resolved.\n        throw new EthAppNftNotSupported();\n      }\n      throw e;\n    }\n  );\n}\n\nfunction setExternalPlugin(\n  transport: Transport,\n  payload: string,\n  signature: string\n): Promise<boolean> {\n  const payloadBuffer = Buffer.from(payload, \"hex\");\n  const signatureBuffer = Buffer.from(signature, \"hex\");\n  const buffer = Buffer.concat([payloadBuffer, signatureBuffer]);\n  return transport.send(0xe0, 0x12, 0x00, 0x00, buffer).then(\n    () => true,\n    (e) => {\n      if (e && e.statusCode === 0x6a80) {\n        // this case happen when the plugin name is too short or too long\n        return false;\n      } else if (e && e.statusCode === 0x6984) {\n        // this case happen when the plugin requested is not installed on the device\n        return false;\n      } else if (e && e.statusCode === 0x6d00) {\n        // this case happen for older version of ETH app\n        return false;\n      }\n      throw e;\n    }\n  );\n}\n\nfunction setPlugin(transport: Transport, data: string): Promise<boolean> {\n  const buffer = Buffer.from(data, \"hex\");\n  return transport.send(0xe0, 0x16, 0x00, 0x00, buffer).then(\n    () => true,\n    (e) => {\n      if (e && e.statusCode === 0x6a80) {\n        // this case happen when the plugin name is too short or too long\n        return false;\n      } else if (e && e.statusCode === 0x6984) {\n        // this case happen when the plugin requested is not installed on the device\n        return false;\n      } else if (e && e.statusCode === 0x6d00) {\n        // this case happen for older version of ETH app\n        return false;\n      }\n      throw e;\n    }\n  );\n}\n"],"names":["isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","i","coeffToString","a","s","z","j","length","r","charCodeAt","slice","compare","x","y","b","xc","c","yc","k","e","l","intCheck","min","max","name","Error","String","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","BigNumber","clone","configObject","div","convertBase","parseNumeric","P","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","alphabet","caseChanged","isNum","this","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","id","c0","ne","maxOrMin","args","method","m","call","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","pow2_53","random53bitInt","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","Symbol","toStringTag","for","splitPath","path","result","forEach","element","number","parseInt","hexBuffer","Buffer","from","startsWith","maybeHexBuffer","ERC20_CLEAR_SIGNED_SELECTORS","ERC721_CLEAR_SIGNED_SELECTORS","ERC1155_CLEAR_SIGNED_SELECTORS","decodeTxInfo","rawTx","decodedTx","txType","includes","rlpData","rlpTx","decode","map","hex","chainIdTruncated","rlpDecoded","chainIdSrc","data","to","chainId","chainIdTruncatedBuf","alloc","readUInt32BE","vrsOffset","rlpVrs","encode","intAsHexBytes","int","bytes","padStart","tokenSelectors","Object","values","nftSelectors","__spreadArray","__read","mergeResolutions","oldResolution","newResolution","resolutions","nfts","erc20Tokens","externalPlugin","plugin","key","_a","apply","_b","defaultLoadConfig","nftExplorerBaseURL","pluginBaseURL","extraPlugins","cryptoassetsBaseURL","getLoadConfig","userLoadConfig","__assign","loadInfosForContractMethod","contractAddress","selector","__awaiter","url_1","axios","then","log","sent","lcSelector","lcContractAddress","contractSelectors","payload","signature","erc20OfInterest","abi","signatures","asContractAddress","addr","parse","erc20SignaturesBlob","buf","entries","length_1","item","tickerLength","readUInt8","ticker","decimals","entry","list","byContractAndChainId","get","cache","signatureBlob","signaturesByChainId","api","getNFTInfo","url","response","collectionNameLength","collectionNameHex","collectionName","match","reduce","acc","curr","fromCharCode","loadNftPlugin","getAdditionalDataForContract","loadConfig","shouldResolve","resolution","nft","nftInfo","token","erc20Info","contract","byContractAddressAndChainId","loadNanoAppPlugins","nftPluginPayload","externalPlugins","contractMethodInfos","Interface","parseTransaction","erc20OfInterest_1","__values","erc20OfInterest_1_1","next","value","erc20ContractAddress","seg","Array","isArray","externalPluginResolution","resolveTransaction","rawTxHex","resolutionConfig","pluginsResolution","contractResolution","erc20","EthAppPleaseEnableContractData","createCustomErrorClass","EthAppNftNotSupported","EIP712_ARRAY_TYPE_VALUE","EIP712_TYPE_PROPERTIES","CUSTOM","sizeInBits","INT","size","Number","UINT","ADDRESS","BOOL","STRING","BYTES","EIP712_TYPE_ENCODERS","failSafeValue","valueAsBN","sizeInBytes","paddedHexString","destructTypeFromString","typeName","splitNameAndArraysRegex","splitArraysRegex","splitNameAndNumberRegex","exec","type","maybeArrays","bits","typeDescription","undefined","arraySizes","matchAll","makeTypeEntryStructBuffer","_f","arrSizes","isTypeAnArray","Boolean","typeProperties","typeKey","typeSizeInBits","typeDescData","typeSize","typeValue","isArrayBit","hasTypeSize","typeValueBits","constructTypeDescByteString","bufferArray","_d","_c","_e","FIXED","DYNAMIC","isEIP712Message","message","sortObjectAlphabetically","keys","sort","field","getFiltersForMessage","remoteCryptoAssetsListURI","schemaHash","types","sortedTypes","SHA224","JSON","stringify","getSchemaHashForMessage","messageId","domain","verifyingContract","EIP712CAL","sendStructDef","transport","structDef","APDU_FIELDS","structType","send","CLA","INS","P1_complete","P2_name","P2_field","sendStructImplem","structImplem","P2_root","P2_array","rawData","encodedData","dataLengthPer16Bits","dataLengthModulo16Bits","data_2","bufferSlices","fill","_","bufferSlices_1","bufferSlices_1_1","bufferSlice","P1_partial","Promise","resolve","sendFilteringInfo","P1","P2_activate","displayName","filtersCount","sig","displayNameLengthBuffer","displayNameBuffer","filtersCountBuffer","sigLengthBuffer","sigBuffer","callData","P2_contract_name","P2_show_field","signEIP712Message","jsonMessage","fullImplem","primaryType","unsortedTypes","filters","_j","typeEntries","typeEntries_1","typeEntries_1_1","e_4","entries_1","entries_1_1","name_1","typeEntryBuffer","recursiveFieldStructImplem","typesMap","destructedType","currSize","restSizes","isCustomType","_h","_k","data_1","data_1_1","fieldName","fieldValue","fieldType","filter","fields","find","f","label","makeRecursiveFieldStructImplem","domainName","domainTypeFields","domainTypeFields_1","domainTypeFields_1_1","name_2","domainFieldValue","contractName","contractNameInfos","primaryTypeFields","primaryTypeFields_1","primaryTypeFields_1_1","name_3","primaryTypeValue","paths","signatureBuffer","index","writeUInt32BE","P2_v0","P2_full","starkQuantizationTypeMap","eth","erc721","erc20mintable","erc721mintable","Eth","scrambleKey","decorateAppAPIMethods","setLoadConfig","getAddress","boolDisplay","boolChaincode","buffer","publicKeyLength","addressLength","publicKey","address","chainCode","signTransaction","console","warn","ledgerService","_q","setPlugin","setExternalPlugin","_g","provideNFTInformation","provideERC20TokenInformation","offset","maxChunkSize","first","chunkSize","this_1","statusCode","remapTransactionRelatedErrors","_r","response_byte","oneByteChainId","ecc_parity","clearSignTransaction","throwOnError","getAppConfiguration","arbitraryDataEnabled","erc20ProvisioningNecessary","starkEnabled","starkv2Supported","version","signPersonalMessage","messageHex","this_2","signEIP712HashedMessage","domainSeparatorHex","hashStructMessageHex","domainSeparator","hashStruct","starkGetPublicKey","starkSignOrder","sourceTokenAddress","sourceQuantization","destinationTokenAddress","destinationQuantization","sourceVault","destinationVault","amountSell","amountBuy","nonce","timestamp","sourceTokenAddressHex","destinationTokenAddressHex","starkSignOrder_v2","sourceQuantizationType","sourceMintableBlobOrTokenId","destinationQuantizationType","destinationMintableBlobOrTokenId","starkSignTransfer","transferTokenAddress","transferQuantization","targetPublicKey","amountTransfer","transferTokenAddressHex","targetPublicKeyHex","starkSignTransfer_v2","transferQuantizationType","transferMintableBlobOrTokenId","conditionalTransferAddress","conditionalTransferFact","conditionalTransferAddressHex","starkProvideQuantum","operationContract","operationQuantization","operationContractHex","starkProvideQuantum_v2","operationQuantizationType","operationMintableBlobOrTokenId","starkUnsafeSign","hash","hashHex","eth2GetPublicKey","eth2SetWithdrawalIndex","withdrawalIndex","getEIP1024PublicEncryptionKey","getEIP1024SharedSecret","remotePublicKeyHex","remotePublicKey","sharedSecret","pluginName","payloadBuffer"],"sourceRoot":""}