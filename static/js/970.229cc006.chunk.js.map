{"version":3,"file":"static/js/970.229cc006.chunk.js","mappings":"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","sources":["../node_modules/@ledgerhq/cryptoassets/src/data/evm/index.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/contracts.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/erc20.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/index.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/loadConfig.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/nfts.ts","../node_modules/@ledgerhq/hw-app-eth/src/utils.ts","../node_modules/@ledgerhq/hw-app-eth/node_modules/bignumber.js/bignumber.js"],"sourcesContent":["import arbitrum_tokens from \"./42161/erc20.json\";\nimport bsc_tokens from \"./56/erc20.json\";\nimport cronos_tokens from \"./25/erc20.json\";\nimport ethereum_tokens from \"./1/erc20.json\";\nimport ethereum_goerli_tokens from \"./5/erc20.json\";\nimport ethereum_rinkeby_tokens from \"./4/erc20.json\";\nimport ethereum_ropsten_tokens from \"./3/erc20.json\";\nimport ethereum_sepolia_tokens from \"./11155111/erc20.json\";\nimport fantom_tokens from \"./250/erc20.json\";\nimport flare_tokens from \"./14/erc20.json\";\nimport moonbeam_tokens from \"./1284/erc20.json\";\nimport optimism_tokens from \"./10/erc20.json\";\nimport polygon_tokens from \"./137/erc20.json\";\nimport songbird_tokens from \"./19/erc20.json\";\nimport arbitrum_signatures from \"./42161/erc20-signatures.json\";\nimport bsc_signatures from \"./56/erc20-signatures.json\";\nimport cronos_signatures from \"./25/erc20-signatures.json\";\nimport ethereum_signatures from \"./1/erc20-signatures.json\";\nimport ethereum_goerli_signatures from \"./5/erc20-signatures.json\";\nimport ethereum_rinkeby_signatures from \"./4/erc20-signatures.json\";\nimport ethereum_ropsten_signatures from \"./3/erc20-signatures.json\";\nimport ethereum_sepolia_signatures from \"./11155111/erc20-signatures.json\";\nimport fantom_signatures from \"./250/erc20-signatures.json\";\nimport flare_signatures from \"./14/erc20-signatures.json\";\nimport moonbeam_signatures from \"./1284/erc20-signatures.json\";\nimport optimism_signatures from \"./10/erc20-signatures.json\";\nimport polygon_signatures from \"./137/erc20-signatures.json\";\nimport songbird_signatures from \"./19/erc20-signatures.json\";\n\nexport const tokens = {\n  42161: arbitrum_tokens,\n  56: bsc_tokens,\n  25: cronos_tokens,\n  1: ethereum_tokens,\n  5: ethereum_goerli_tokens,\n  4: ethereum_rinkeby_tokens,\n  3: ethereum_ropsten_tokens,\n  11155111: ethereum_sepolia_tokens,\n  250: fantom_tokens,\n  14: flare_tokens,\n  1284: moonbeam_tokens,\n  10: optimism_tokens,\n  137: polygon_tokens,\n  19: songbird_tokens,\n};\n\nexport const signatures = {\n  42161: arbitrum_signatures,\n  56: bsc_signatures,\n  25: cronos_signatures,\n  1: ethereum_signatures,\n  5: ethereum_goerli_signatures,\n  4: ethereum_rinkeby_signatures,\n  3: ethereum_ropsten_signatures,\n  11155111: ethereum_sepolia_signatures,\n  250: fantom_signatures,\n  14: flare_signatures,\n  1284: moonbeam_signatures,\n  10: optimism_signatures,\n  137: polygon_signatures,\n  19: songbird_signatures,\n};\n\nexport default {\n  tokens,\n  signatures,\n};\n","import axios from \"axios\";\nimport { getLoadConfig } from \"./loadConfig\";\nimport type { LoadConfig } from \"../types\";\nimport { log } from \"@ledgerhq/logs\";\n\ntype ContractMethod = {\n  payload: string;\n  signature: string;\n  plugin: string;\n  erc20OfInterest: string[];\n  abi: any;\n};\n\n/**\n * Retrieve the metadatas a given contract address and a method selector\n */\nexport const loadInfosForContractMethod = async (\n  contractAddress: string,\n  selector: string,\n  chainId: number,\n  userLoadConfig: LoadConfig\n): Promise<ContractMethod | undefined> => {\n  const { pluginBaseURL, extraPlugins } = getLoadConfig(userLoadConfig);\n\n  let data = {};\n\n  if (pluginBaseURL) {\n    const url = `${pluginBaseURL}/plugins/ethereum.json`;\n    data = await axios\n      .get(`${pluginBaseURL}/plugins/ethereum.json`)\n      .then((r) => r.data as any)\n      .catch((e) => {\n        log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n        return null;\n      });\n  }\n\n  if (extraPlugins) {\n    data = { ...data, ...extraPlugins };\n  }\n\n  if (!data) return;\n\n  const lcSelector = selector.toLowerCase();\n  const lcContractAddress = contractAddress.toLowerCase();\n\n  if (lcContractAddress in data) {\n    const contractSelectors = data[lcContractAddress];\n\n    if (lcSelector in contractSelectors) {\n      return {\n        payload: contractSelectors[lcSelector][\"serialized_data\"],\n        signature: contractSelectors[lcSelector][\"signature\"],\n        plugin: contractSelectors[lcSelector][\"plugin\"],\n        erc20OfInterest: contractSelectors[lcSelector][\"erc20OfInterest\"],\n        abi: contractSelectors[\"abi\"],\n      };\n    }\n  }\n};\n","import axios from \"axios\";\nimport { log } from \"@ledgerhq/logs\";\nimport { signatures as signaturesByChainId } from \"@ledgerhq/cryptoassets/data/evm/index\";\nimport { getLoadConfig } from \"./loadConfig\";\nimport { LoadConfig } from \"../types\";\n\nconst asContractAddress = (addr: string) => {\n  const a = addr.toLowerCase();\n  return a.startsWith(\"0x\") ? a : \"0x\" + a;\n};\n\nexport const findERC20SignaturesInfo = async (\n  userLoadConfig: LoadConfig,\n  chainId: number\n): Promise<string | null> => {\n  const { cryptoassetsBaseURL } = getLoadConfig(userLoadConfig);\n  if (!cryptoassetsBaseURL) return null;\n\n  const url = `${cryptoassetsBaseURL}/evm/${chainId}/erc20-signatures.json`;\n  const blob = await axios\n    .get<string>(url)\n    .then(({ data }) => {\n      if (!data || typeof data !== \"string\") {\n        throw new Error(\n          `ERC20 signatures for chainId ${chainId} file is malformed ${url}`\n        );\n      }\n      return data;\n    })\n    .catch((e) => {\n      log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n      return null;\n    });\n\n  return blob;\n};\n\n/**\n * Retrieve the token information by a given contract address if any\n */\nexport const byContractAddressAndChainId = (\n  contract: string,\n  chainId: number,\n  erc20SignaturesBlob?: string | null\n): ReturnType<API[\"byContractAndChainId\"]> => {\n  // If we are able to fetch data from s3 bucket that contains dynamic CAL\n  if (erc20SignaturesBlob) {\n    try {\n      return parse(erc20SignaturesBlob).byContractAndChainId(\n        asContractAddress(contract),\n        chainId\n      );\n    } catch (e) {\n      return get(chainId)?.byContractAndChainId(\n        asContractAddress(contract),\n        chainId\n      );\n    }\n  }\n\n  // the static fallback when dynamic cal is not provided\n  return get(chainId)?.byContractAndChainId(\n    asContractAddress(contract),\n    chainId\n  );\n};\n\nexport type TokenInfo = {\n  contractAddress: string;\n  ticker: string;\n  decimals: number;\n  chainId: number;\n  signature: Buffer;\n  data: Buffer;\n};\nexport type API = {\n  byContractAndChainId: (\n    addr: string,\n    id: number\n  ) => TokenInfo | null | undefined;\n  list: () => TokenInfo[];\n};\n\nconst parse = (erc20SignaturesBlob: string): API => {\n  const buf = Buffer.from(erc20SignaturesBlob, \"base64\");\n  const map = {};\n  const entries: TokenInfo[] = [];\n  let i = 0;\n\n  while (i < buf.length) {\n    const length = buf.readUInt32BE(i);\n    i += 4;\n    const item = buf.slice(i, i + length);\n    let j = 0;\n    const tickerLength = item.readUInt8(j);\n    j += 1;\n    const ticker = item.slice(j, j + tickerLength).toString(\"ascii\");\n    j += tickerLength;\n    const contractAddress = asContractAddress(\n      item.slice(j, j + 20).toString(\"hex\")\n    );\n    j += 20;\n    const decimals = item.readUInt32BE(j);\n    j += 4;\n    const chainId = item.readUInt32BE(j);\n    j += 4;\n    const signature = item.slice(j);\n    const entry: TokenInfo = {\n      ticker,\n      contractAddress,\n      decimals,\n      chainId,\n      signature,\n      data: item,\n    };\n    entries.push(entry);\n    map[String(chainId) + \":\" + contractAddress] = entry;\n    i += length;\n  }\n\n  return {\n    list: () => entries,\n    byContractAndChainId: (contractAddress, chainId) =>\n      map[String(chainId) + \":\" + contractAddress],\n  };\n};\n\n// this internal get() will lazy load and cache the data from the erc20 data blob\nconst get: (chainId: number) => API | null = (() => {\n  const cache: Record<number, API> = {};\n  return (chainId) => {\n    if (cache[chainId]) return cache[chainId];\n\n    const signatureBlob: string | undefined = signaturesByChainId[chainId];\n    if (!signatureBlob) return null;\n\n    const api = parse(signatureBlob);\n    cache[chainId] = api;\n    return api;\n  };\n})();\n","// This implements the resolution of a Transaction using Ledger's own API\nimport { log } from \"@ledgerhq/logs\";\nimport { Interface } from \"@ethersproject/abi\";\n\nimport {\n  LedgerEthTransactionResolution,\n  LedgerEthTransactionService,\n  LoadConfig,\n} from \"../types\";\nimport { loadInfosForContractMethod } from \"./contracts\";\nimport { byContractAddressAndChainId, findERC20SignaturesInfo } from \"./erc20\";\nimport { getNFTInfo, loadNftPlugin } from \"./nfts\";\nimport {\n  decodeTxInfo,\n  tokenSelectors,\n  nftSelectors,\n  mergeResolutions,\n} from \"../../utils\";\n\ntype potentialResolutions = {\n  token: boolean | undefined;\n  nft: boolean | undefined;\n  externalPlugins: boolean | undefined;\n};\n\n/**\n * @ignore for external documentation\n *\n * Providing additionnal data for some transactions (Token or NFT related) can enable clear signing\n * of initially impossible to decode data.\n * This method will add necessary APDUs to the resolution paramter in order to provide this data to the nano app\n */\nconst getAdditionalDataForContract = async (\n  contractAddress: string,\n  chainIdTruncated: number,\n  loadConfig: LoadConfig,\n  shouldResolve: potentialResolutions\n): Promise<Pick<LedgerEthTransactionResolution, \"nfts\" | \"erc20Tokens\">> => {\n  const resolution: Pick<\n    LedgerEthTransactionResolution,\n    \"nfts\" | \"erc20Tokens\"\n  > = {\n    nfts: [],\n    erc20Tokens: [],\n  };\n\n  if (shouldResolve.nft) {\n    const nftInfo = await getNFTInfo(\n      contractAddress,\n      chainIdTruncated,\n      loadConfig\n    );\n\n    if (nftInfo) {\n      log(\n        \"ethereum\",\n        \"loaded nft info for \" +\n          nftInfo.contractAddress +\n          \" (\" +\n          nftInfo.collectionName +\n          \")\"\n      );\n      resolution.nfts.push(nftInfo.data);\n    } else {\n      log(\"ethereum\", \"couldn't load nft info for \" + contractAddress);\n    }\n  }\n\n  if (shouldResolve.token) {\n    const erc20SignaturesBlob = await findERC20SignaturesInfo(\n      loadConfig,\n      chainIdTruncated\n    );\n    const erc20Info = byContractAddressAndChainId(\n      contractAddress,\n      chainIdTruncated,\n      erc20SignaturesBlob\n    );\n\n    if (erc20Info) {\n      log(\n        \"ethereum\",\n        \"loaded erc20token info for \" +\n          erc20Info.contractAddress +\n          \" (\" +\n          erc20Info.ticker +\n          \")\"\n      );\n      resolution.erc20Tokens.push(erc20Info.data.toString(\"hex\"));\n    } else {\n      log(\"ethereum\", \"couldn't load erc20token info for \" + contractAddress);\n    }\n  }\n\n  return resolution;\n};\n\n/**\n * @ignore for external documentation\n *\n * Depending on the transaction, it might be necessary to load internal plugins in the nano app\n * in order to clear sign it.\n * This method will add necessary APDUs to the resolution parameter in order to load those internal plugins\n */\nconst loadNanoAppPlugins = async (\n  contractAddress: string,\n  selector: string,\n  decodedTx,\n  chainIdTruncated: number,\n  loadConfig: LoadConfig,\n  shouldResolve: potentialResolutions\n): Promise<LedgerEthTransactionResolution> => {\n  let resolution: LedgerEthTransactionResolution = {\n    externalPlugin: [],\n    plugin: [],\n    nfts: [],\n    erc20Tokens: [],\n  };\n\n  if (shouldResolve.nft) {\n    const nftPluginPayload = await loadNftPlugin(\n      contractAddress,\n      selector,\n      chainIdTruncated,\n      loadConfig\n    );\n\n    if (nftPluginPayload) {\n      resolution.plugin.push(nftPluginPayload);\n    } else {\n      log(\n        \"ethereum\",\n        \"no NFT plugin payload for selector \" +\n          selector +\n          \" and address \" +\n          contractAddress\n      );\n    }\n  }\n\n  if (shouldResolve.externalPlugins) {\n    const contractMethodInfos = await loadInfosForContractMethod(\n      contractAddress,\n      selector,\n      chainIdTruncated,\n      loadConfig\n    );\n\n    if (contractMethodInfos) {\n      const { plugin, payload, signature, erc20OfInterest, abi } =\n        contractMethodInfos;\n\n      if (plugin) {\n        log(\"ethereum\", \"found plugin for \" + selector);\n        resolution.externalPlugin.push({ payload, signature });\n      }\n\n      if (erc20OfInterest && erc20OfInterest.length && abi) {\n        const contract = new Interface(abi);\n        const args = contract.parseTransaction(decodedTx).args;\n\n        for (const path of erc20OfInterest) {\n          const erc20ContractAddress = path.split(\".\").reduce((value, seg) => {\n            if (seg === \"-1\" && Array.isArray(value)) {\n              return value[value.length - 1];\n            }\n            return value[seg];\n          }, args) as unknown as string; // impossible(?) to type correctly as the initializer is different from the returned type\n\n          const externalPluginResolution = await getAdditionalDataForContract(\n            erc20ContractAddress,\n            chainIdTruncated,\n            loadConfig,\n            {\n              nft: false,\n              externalPlugins: false,\n              token: true, // enforcing resolution of tokens for external plugins that need info on assets (e.g. for a swap)\n            }\n          );\n          resolution = mergeResolutions(resolution, externalPluginResolution);\n        }\n      }\n    } else {\n      log(\"ethereum\", \"no infos for selector \" + selector);\n    }\n  }\n\n  return resolution;\n};\n\nconst ledgerService: LedgerEthTransactionService = {\n  resolveTransaction: async (rawTxHex, loadConfig, resolutionConfig) => {\n    const rawTx = Buffer.from(rawTxHex, \"hex\");\n    const { decodedTx, chainIdTruncated } = decodeTxInfo(rawTx);\n\n    const contractAddress = decodedTx.to;\n    const selector =\n      decodedTx.data.length >= 10 && decodedTx.data.substring(0, 10);\n\n    let pluginsResolution: Partial<LedgerEthTransactionResolution> = {};\n    let contractResolution: Partial<LedgerEthTransactionResolution> = {};\n    if (selector) {\n      const shouldResolve: potentialResolutions = {\n        token: resolutionConfig.erc20 && tokenSelectors.includes(selector),\n        nft: resolutionConfig.nft && nftSelectors.includes(selector),\n        externalPlugins: resolutionConfig.externalPlugins,\n      };\n\n      pluginsResolution = await loadNanoAppPlugins(\n        contractAddress,\n        selector,\n        decodedTx,\n        chainIdTruncated,\n        loadConfig,\n        shouldResolve\n      );\n\n      contractResolution = await getAdditionalDataForContract(\n        contractAddress,\n        chainIdTruncated,\n        loadConfig,\n        shouldResolve\n      );\n    }\n\n    return mergeResolutions(pluginsResolution, contractResolution);\n  },\n};\n\nexport default ledgerService;\n","import type { LoadConfig } from \"../types\";\n\nconst defaultLoadConfig = {\n  nftExplorerBaseURL: \"https://nft.api.live.ledger.com/v1/ethereum\",\n  pluginBaseURL: \"https://cdn.live.ledger.com\",\n  extraPlugins: null,\n  cryptoassetsBaseURL: \"https://cdn.live.ledger.com/cryptoassets\",\n};\n\nexport function getLoadConfig(userLoadConfig?: LoadConfig): LoadConfig {\n  return {\n    ...defaultLoadConfig,\n    ...userLoadConfig,\n  };\n}\n","import axios from \"axios\";\nimport { getLoadConfig } from \"./loadConfig\";\nimport type { LoadConfig } from \"../types\";\nimport { log } from \"@ledgerhq/logs\";\n\ntype NftInfo = {\n  contractAddress: string;\n  collectionName: string;\n  data: string;\n};\n\ntype BackendResponse = {\n  payload: string;\n};\n\nexport const getNFTInfo = async (\n  contractAddress: string,\n  chainId: number,\n  userLoadConfig: LoadConfig\n): Promise<NftInfo | undefined> => {\n  const { nftExplorerBaseURL } = getLoadConfig(userLoadConfig);\n  if (!nftExplorerBaseURL) return;\n  const url = `${nftExplorerBaseURL}/${chainId}/contracts/${contractAddress}`;\n  const response = await axios\n    .get<BackendResponse>(url)\n    .then((r) => r.data)\n    .catch((e) => {\n      log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n      return null;\n    });\n  if (!response) return;\n\n  // APDU response specification: https://ledgerhq.atlassian.net/wiki/spaces/WALLETCO/pages/3269984297/NFT-1+NFT+Backend+design#NFT-Metadata-BLOB\n  const payload = response[\"payload\"];\n  // Collection name length position: 3rd byte -> caracter 4 to 6\n  const collectionNameLength = parseInt(payload.slice(4, 6), 16);\n  const collectionNameHex = payload.substr(6, collectionNameLength * 2);\n  const collectionName = collectionNameHex\n    .match(/.{2}/g) // split every 2 characters\n    ?.reduce(\n      (acc, curr) => (acc += String.fromCharCode(parseInt(curr, 16))),\n      \"\"\n    ); // convert hex to string\n\n  return {\n    contractAddress: contractAddress,\n    collectionName: collectionName || \"\",\n    data: payload,\n  };\n};\n\nexport const loadNftPlugin = async (\n  contractAddress: string,\n  selector: string,\n  chainId: number,\n  userLoadConfig: LoadConfig\n): Promise<string | undefined> => {\n  const { nftExplorerBaseURL } = getLoadConfig(userLoadConfig);\n  if (!nftExplorerBaseURL) return;\n  const url = `${nftExplorerBaseURL}/${chainId}/contracts/${contractAddress}/plugin-selector/${selector}`;\n\n  const response = await axios\n    .get<BackendResponse>(url)\n    .then((r) => r.data)\n    .catch((e) => {\n      log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n      return null;\n    });\n  if (!response) return;\n\n  const payload = response[\"payload\"];\n  return payload;\n};\n","import { encode, decode } from \"@ethersproject/rlp\";\nimport { BigNumber } from \"bignumber.js\";\nimport { LedgerEthTransactionResolution } from \"./services/types\";\n\nexport function splitPath(path: string): number[] {\n  const result: number[] = [];\n  const components = path.split(\"/\");\n  components.forEach((element) => {\n    let number = parseInt(element, 10);\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n    result.push(number);\n  });\n  return result;\n}\n\nexport function hexBuffer(str: string): Buffer {\n  return Buffer.from(str.startsWith(\"0x\") ? str.slice(2) : str, \"hex\");\n}\n\nexport function maybeHexBuffer(\n  str: string | null | undefined\n): Buffer | null | undefined {\n  if (!str) return null;\n  return hexBuffer(str);\n}\n\nexport const decodeTxInfo = (rawTx: Buffer) => {\n  const VALID_TYPES = [1, 2];\n  const txType = VALID_TYPES.includes(rawTx[0]) ? rawTx[0] : null;\n  const rlpData = txType === null ? rawTx : rawTx.slice(1);\n  const rlpTx = decode(rlpData).map((hex) => Buffer.from(hex.slice(2), \"hex\"));\n  let chainIdTruncated = 0;\n  const rlpDecoded = decode(rlpData);\n\n  let decodedTx;\n  if (txType === 2) {\n    // EIP1559\n    decodedTx = {\n      data: rlpDecoded[7],\n      to: rlpDecoded[5],\n      chainId: rlpTx[0],\n    };\n  } else if (txType === 1) {\n    // EIP2930\n    decodedTx = {\n      data: rlpDecoded[6],\n      to: rlpDecoded[4],\n      chainId: rlpTx[0],\n    };\n  } else {\n    // Legacy tx\n    decodedTx = {\n      data: rlpDecoded[5],\n      to: rlpDecoded[3],\n      // Default to 1 for non EIP 155 txs\n      chainId: rlpTx.length > 6 ? rlpTx[6] : Buffer.from(\"0x01\", \"hex\"),\n    };\n  }\n\n  const chainIdSrc = decodedTx.chainId;\n  let chainId = new BigNumber(0);\n  if (chainIdSrc) {\n    // Using BigNumber because chainID could be any uint256.\n    chainId = new BigNumber(chainIdSrc.toString(\"hex\"), 16);\n    const chainIdTruncatedBuf = Buffer.alloc(4);\n    if (chainIdSrc.length > 4) {\n      chainIdSrc.copy(chainIdTruncatedBuf);\n    } else {\n      chainIdSrc.copy(chainIdTruncatedBuf, 4 - chainIdSrc.length);\n    }\n    chainIdTruncated = chainIdTruncatedBuf.readUInt32BE(0);\n  }\n\n  let vrsOffset = 0;\n  if (txType === null && rlpTx.length > 6) {\n    const rlpVrs = Buffer.from(encode(rlpTx.slice(-3)).slice(2), \"hex\");\n\n    vrsOffset = rawTx.length - (rlpVrs.length - 1);\n\n    // First byte > 0xf7 means the length of the list length doesn't fit in a single byte.\n    if (rlpVrs[0] > 0xf7) {\n      // Increment vrsOffset to account for that extra byte.\n      vrsOffset++;\n\n      // Compute size of the list length.\n      const sizeOfListLen = rlpVrs[0] - 0xf7;\n\n      // Increase rlpOffset by the size of the list length.\n      vrsOffset += sizeOfListLen - 1;\n    }\n  }\n\n  return {\n    decodedTx,\n    txType,\n    chainId,\n    chainIdTruncated,\n    vrsOffset,\n  };\n};\n\n/**\n * @ignore for the README\n *\n * Helper to convert an integer as a hexadecimal string with the right amount of digits\n * to respect the number of bytes given as parameter\n *\n * @param int Integer\n * @param bytes Number of bytes it should be represented as (1 byte = 2 caraters)\n * @returns The given integer as an hexa string padded with the right number of 0\n */\nexport const intAsHexBytes = (int: number, bytes: number): string =>\n  int.toString(16).padStart(2 * bytes, \"0\");\n\n/**\n * @ignore for the README\n *\n * List of selectors (hexadecimal representation of the used method's signature) related to\n * ERC20 (Tokens), ERC721/ERC1155 (NFT).\n * You can verify and/or get more info about them on http://4byte.directory\n */\n\nexport enum ERC20_CLEAR_SIGNED_SELECTORS {\n  APPROVE = \"0x095ea7b3\",\n  TRANSFER = \"0xa9059cbb\",\n}\n\nexport enum ERC721_CLEAR_SIGNED_SELECTORS {\n  APPROVE = \"0x095ea7b3\",\n  SET_APPROVAL_FOR_ALL = \"0xa22cb465\",\n  TRANSFER_FROM = \"0x23b872dd\",\n  SAFE_TRANSFER_FROM = \"0x42842e0e\",\n  SAFE_TRANSFER_FROM_WITH_DATA = \"0xb88d4fde\",\n}\n\nexport enum ERC1155_CLEAR_SIGNED_SELECTORS {\n  SET_APPROVAL_FOR_ALL = \"0xa22cb465\",\n  SAFE_TRANSFER_FROM = \"0xf242432a\",\n  SAFE_BATCH_TRANSFER_FROM = \"0x2eb2c2d6\",\n}\n\nexport const tokenSelectors = Object.values(ERC20_CLEAR_SIGNED_SELECTORS);\nexport const nftSelectors = [\n  ...Object.values(ERC721_CLEAR_SIGNED_SELECTORS),\n  ...Object.values(ERC1155_CLEAR_SIGNED_SELECTORS),\n];\n\nexport const mergeResolutions = (\n  oldResolution: Partial<LedgerEthTransactionResolution>,\n  newResolution: Partial<LedgerEthTransactionResolution>\n): LedgerEthTransactionResolution => {\n  const resolutions: LedgerEthTransactionResolution = {\n    nfts: [],\n    erc20Tokens: [],\n    externalPlugin: [],\n    plugin: [],\n  };\n\n  for (const key in oldResolution) {\n    resolutions[key].push(...oldResolution[key]);\n  }\n\n  for (const key in newResolution) {\n    resolutions[key].push(...newResolution[key]);\n  }\n\n  return resolutions;\n};\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n"],"names":["erc20_json_1","__importDefault","require","erc20_json_2","erc20_json_3","erc20_json_4","erc20_json_5","erc20_json_6","erc20_json_7","erc20_json_8","erc20_json_9","erc20_json_10","erc20_json_11","erc20_json_12","erc20_json_13","erc20_json_14","erc20_signatures_json_1","erc20_signatures_json_2","erc20_signatures_json_3","erc20_signatures_json_4","erc20_signatures_json_5","erc20_signatures_json_6","erc20_signatures_json_7","erc20_signatures_json_8","erc20_signatures_json_9","erc20_signatures_json_10","erc20_signatures_json_11","erc20_signatures_json_12","erc20_signatures_json_13","erc20_signatures_json_14","exports","tokens","signatures","axios_1","loadConfig_1","logs_1","contractAddress","selector","chainId","userLoadConfig","__awaiter","_a","getLoadConfig","pluginBaseURL","extraPlugins","data","url_1","concat","get","then","r","e","log","String","_b","sent","__assign","lcSelector","toLowerCase","lcContractAddress","contractSelectors","payload","signature","plugin","erc20OfInterest","abi","index_1","asContractAddress","addr","a","startsWith","cryptoassetsBaseURL","url","Error","contract","erc20SignaturesBlob","parse","byContractAndChainId","buf","Buffer","from","map","entries","i","length","length_1","readUInt32BE","item","slice","j","tickerLength","readUInt8","ticker","toString","decimals","entry","push","list","cache","signatureBlob","api","abi_1","contracts_1","erc20_1","nfts_1","utils_1","getAdditionalDataForContract","chainIdTruncated","loadConfig","shouldResolve","resolution","nfts","erc20Tokens","nft","getNFTInfo","nftInfo","collectionName","token","findERC20SignaturesInfo","erc20Info","byContractAddressAndChainId","loadNanoAppPlugins","decodedTx","externalPlugin","loadNftPlugin","nftPluginPayload","externalPlugins","loadInfosForContractMethod","contractMethodInfos","Interface","args","parseTransaction","erc20OfInterest_1","__values","erc20OfInterest_1_1","next","path","value","erc20ContractAddress","split","reduce","seg","Array","isArray","externalPluginResolution","mergeResolutions","ledgerService","resolveTransaction","rawTxHex","resolutionConfig","rawTx","decodeTxInfo","to","substring","pluginsResolution","contractResolution","erc20","tokenSelectors","includes","nftSelectors","defaultLoadConfig","nftExplorerBaseURL","response","collectionNameLength","parseInt","collectionNameHex","substr","match","acc","curr","fromCharCode","rlp_1","bignumber_js_1","hexBuffer","str","result","forEach","element","number","isNaN","txType","rlpData","rlpTx","decode","hex","rlpDecoded","chainIdSrc","BigNumber","chainIdTruncatedBuf","alloc","copy","vrsOffset","rlpVrs","encode","ERC20_CLEAR_SIGNED_SELECTORS","ERC721_CLEAR_SIGNED_SELECTORS","ERC1155_CLEAR_SIGNED_SELECTORS","int","bytes","padStart","Object","values","__spreadArray","__read","oldResolution","newResolution","resolutions","key","apply","globalObject","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","coeffToString","s","z","charCodeAt","compare","x","y","b","xc","c","yc","k","l","intCheck","min","max","name","isOdd","toExponential","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","P","prototype","constructor","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","alphabet","caseChanged","isNum","this","_isBigNumber","test","indexOf","replace","search","round","DEBUG","toUpperCase","format","rm","id","c0","ne","maxOrMin","method","m","call","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","pow2_53","random53bitInt","dp","rand","Uint32Array","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","define"],"sourceRoot":""}